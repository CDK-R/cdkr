[{"path":"https://cdk-r.github.io/cdkr/articles/PerformanceNotes.html","id":"rcdk-performance","dir":"Articles","previous_headings":"","what":"rCDK Performance","title":"Performance Notes","text":"September 2022, year, Stepehn Neumann created benchmark moecular weight calculation announced twitter showing rCDK dismal performance relative tools R ecosystem. Something seemed bit looked code. discovered mass spec calculations mediated R classes instead accessing underlying Java code directly write function get speedup, avoid reflection creating static calls get really fast function. good example think using Java within R use helper rJava functions, J $ allow prototype code benefit reflection can code sort like R. , need performance, can tighten code bit making calls static. can see progression code accompanied outputs benchmarks. https://gist.github.com/sneumann/959a6d205ea4ac73eaf1393da0ec0673 ## Benchmark","code":"will give (2/3) runtime in µs:    21 OrgMassSpecR    163 MetaboCoreUtils   197 enviPat    545 Rdisop    645 CHNOSZ   4863 ChemmineR  22510 rcdk # Bioconductor Packages. Use BiocManager::install() #   Rdisop MetaboCoreUtils ChemmineR ChemmineOB enviPat  library(plyr) library(CHNOSZ) library(enviPat) library(MetaboCoreUtils) library(rcdk) library(ChemmineR) library(OrgMassSpecR) library(Rdisop) #library(ChemmineOB)  data(isotopes)  # original # https://github.com/CDK-R/cdkr/blob/master/rcdk/R/formula.R # get.formula <- function(mf, charge=0) { #    #   manipulator <- get(\"mfManipulator\", envir = .rcdk.GlobalEnv) #   if(!is.character(mf)) { #     stop(\"Must supply a Formula string\"); #   }else{ #     dcob <- .cdkFormula.createChemObject() #     molecularformula <- .cdkFormula.createFormulaObject() #     molecularFormula <- .jcall(manipulator, #                                \"Lorg/openscience/cdk/interfaces/IMolecularFormula;\", #                                \"getMolecularFormula\", #                                mf, #                                .jcast(molecularformula,.IMolecularFormula), #                                TRUE); #   } #    #   D <- new(J(\"java/lang/Integer\"), as.integer(charge)) #   .jcall(molecularFormula,\"V\",\"setCharge\",D); #   object <- .cdkFormula.createObject(.jcast(molecularFormula,.IMolecularFormula)); #   return(object); # }   mfManipulator    <- J(\"org/openscience/cdk/tools/manipulator/MolecularFormulaManipulator\") silentchemobject <- J(\"org.openscience.cdk.silent.SilentChemObjectBuilder\")   #' Rewrite the formual object and directly access Java #' get.formula2 <- function(mf) {      formula <- mfManipulator$getMolecularFormula(     \"C2H3\",      silentchemobject$getInstance())      mfManipulator$getMass(formula)    }  #' Add type hints #' get.formula3 <- function(mf) {   builderinstance <- .jcall(       silentchemobject,      \"Lorg/openscience/cdk/interfaces/IChemObjectBuilder;\",      \"getInstance\")                           formula  <- .jcall(       mfManipulator,      \"Lorg/openscience/cdk/interfaces/IMolecularFormula;\",      \"getMolecularFormula\",       mf,       builderinstance);    mfManipulator$getMass(formula)    }   #' Add type hints #' get.formula4 <- function(mf) {   builderinstance <- .jcall(       silentchemobject,       \"Lorg/openscience/cdk/interfaces/IChemObjectBuilder;\",       \"getInstance\")    formula  <- .jcall(       mfManipulator,      \"Lorg/openscience/cdk/interfaces/IMolecularFormula;\",      \"getMolecularFormula\",      mf,      builderinstance);    .jcall(       mfManipulator,       \"D\",       \"getMass\",      formula) }    benchmark <- microbenchmark::microbenchmark(   MetaboCoreUtils = MetaboCoreUtils::calculateMass(\"C2H6O\"),   rcdk = rcdk::get.formula(\"C2H6O\", charge = 0)@mass,   rcdk2 = get.formula2(\"C2H6O\"),   rcdk3 = get.formula3(\"C2H6O\"),   rcdk4 = get.formula4(\"C2H6O\"),   Rdisop = Rdisop::getMolecule(\"C2H6O\")$exactmass,   ChemmineR = ChemmineR::exactMassOB(ChemmineR::smiles2sdf(\"CCO\")),   OrgMassSpecR = OrgMassSpecR::MonoisotopicMass(formula = OrgMassSpecR::ListFormula(\"C2H6O)\"), charge = 0),      CHNOSZ = CHNOSZ::mass(\"C2H6O\"),   enviPat = enviPat::isopattern(isotopes, \"C2H6O\", charge=FALSE, verbose=FALSE)[[1]][1,1]   , times=1000L)   masses <- c(   MetaboCoreUtils=MetaboCoreUtils::calculateMass(\"C2H6O\"),   rcdk=rcdk::get.formula(\"C2H6O\", charge = 0)@mass,   Rdisop=Rdisop::getMolecule(\"C2H6O\")$exactmass,   #ChemmineR=ChemmineR::exactMassOB(ChemmineR::smiles2sdf(\"CCO\")),   OrgMassSpecR=OrgMassSpecR::MonoisotopicMass(formula = OrgMassSpecR::ListFormula(\"C2H6O)\"), charge = 0),   CHNOSZ=CHNOSZ::mass(\"C2H6O\"),   enviPat=enviPat::isopattern(isotopes, \"C2H6O\", charge=FALSE, verbose=FALSE)[[1]][1,1] )  options(digits=10) t(t(sort(masses))) summary(benchmark)[order(summary(benchmark)[,\"median\"]) , ] clipr::write_clip(as.data.frame(summary(benchmark)[order(summary(benchmark)[,\"median\"]) , ] ))"},{"path":"https://cdk-r.github.io/cdkr/articles/PerformanceNotes.html","id":"results","dir":"Articles","previous_headings":"","what":"Results","title":"Performance Notes","text":"","code":"expr       min         lq         mean     median         uq 1  MetaboCoreUtils    69.479   122.8465   154.049427   139.6495   156.2700 10         enviPat    83.250   143.0935   170.429197   160.5360   179.6570 5            rcdk4   175.889   228.8605   324.182735   271.2955   327.7135 8     OrgMassSpecR   249.287   333.3135   392.479869   357.6665   401.5585 6           Rdisop   382.417   459.8790   538.068697   490.1505   557.9975 9           CHNOSZ   355.145   510.2910   588.186951   555.9165   632.2060 4            rcdk3   781.987  1004.7160  1294.507318  1133.3415  1339.4695 3            rcdk2  2078.465  2392.4950  2920.601088  2612.8025  2931.5465 7        ChemmineR  3227.320  3790.0455  4808.783873  4044.1410  4465.1000 2             rcdk 14823.815 16456.7715 19088.569430 17485.0800 19468.7195"},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/articles/molform.html","id":"introduction","dir":"Articles","previous_headings":"Handling Molecular Formulae","what":"Introduction","title":"Handling Molecular Formulae","text":"molecular formula simplest way characterize molecular compound. specifies actual number atoms element contained molecule. molecular formula represented chemical symbol constituent element. molecule contains one atom particular element, quantity shown subscript chemical symbol. Otherwise, number neutrons (atomic mass) atom composed can differ. different type atoms known isotopes. number nuclei represented superscripted prefix previous chemical element. Generally added isotope characterizes element occurrence nature, e.g., \\(C_4H_{11}O^2D\\).","code":""},{"path":"https://cdk-r.github.io/cdkr/articles/molform.html","id":"parsing-a-molecule-to-a-molecular-formula","dir":"Articles","previous_headings":"Handling Molecular Formulae","what":"Parsing a Molecule To a Molecular Formula","title":"Handling Molecular Formulae","text":"Front molecule, defined conjunct atoms helding together chemical bonds, can simplify taking information atoms. rcdk package provides parser translate molecules molecular formlulas, get.mol2formula function. Note formula object CDKFormula-class. class contains attributes defines molecular formula. example, mass, charge, isotopes, character representation molecular formula IMolecularFormula jobjRef object. molecular mass, charge string representation formula given isotopes formula. formed three attributes. isoto (symbol expression isotope), number (number atoms isotope) mass (exact mass isotope). Depending circumstances, may want change charge molecular formula.","code":"library(rcdk) ## Loading required package: rcdklibs ## Loading required package: rJava sp <- get.smiles.parser() molecule <- parse.smiles('N')[[1]] convert.implicit.to.explicit(molecule) formula <- get.mol2formula(molecule,charge=0) formula@mass ## [1] 17.02655 formula@charge ## [1] 0 formula@string ## [1] \"H3N\" formula@isotopes ##      isoto number mass          ## [1,] \"H\"   \"3\"    \"1.007825032\" ## [2,] \"N\"   \"1\"    \"14.003074\" formula <- set.charge.formula(formula, charge=1)"},{"path":"https://cdk-r.github.io/cdkr/articles/molform.html","id":"initializing-a-formula-from-the-symbol-expression","dir":"Articles","previous_headings":"Handling Molecular Formulae","what":"Initializing a Formula from the Symbol Expression","title":"Handling Molecular Formulae","text":"way create cdkFormula symbol expression. Thus, setting characters elemental formula, function get.formula parses object cdkFormula-class.","code":"formula <- get.formula('NH4', charge = 1) formula ## cdkFormula:  [H4N]+ , mass =  18.03383 , charge =  1"},{"path":"https://cdk-r.github.io/cdkr/articles/molform.html","id":"generating-molecular-formula","dir":"Articles","previous_headings":"Handling Molecular Formulae","what":"Generating Molecular Formula","title":"Handling Molecular Formulae","text":"Mass spectrometry essential reliable technique determine molecular mass compounds. Conversely, one can use measured mass identify compound via elemental formula. One limitations method precision accuracy instrumentation. result, rather specify exact masses, specify tolerances ranges possible mass, resulting multiple candidate formulae given mass window. generate.formula function returns list formulae given mass (within error window) important know elemental formula valid. method isvalid.formula provides function. Two constraints can applied, nitrogen rule RDBE rule (Ring Double Bond Equivalent). can observe ammonium valid defined charge +1. generate.formula method can perform validation tests formula generation setting validation=TRUE. However, can significantly slow process genersating formulae, especially larger mass windows. default FALSE used, nonsensical formulae may generated, ’s user filter . contrast, generate.formula.iter method employs Round Robin formula generation algorithm, significantly faster default method. contrast generate/formula, method returns iterator allows process large formula sets without excessive memory usage. Note default, function check validity generated formulae.","code":"mfSet <- generate.formula(18.03383, window=1,     elements=list(c(\"C\",0,50),c(\"H\",0,50),c(\"N\",0,50)),     validation=FALSE) mfSet ## [[1]] ## cdkFormula:  H4N , mass =  18.03437 , charge =  0  ##  ## [[2]] ## cdkFormula:  CH6 , mass =  18.04695 , charge =  0  ##  ## [[3]] ## cdkFormula:  H18 , mass =  18.14085 , charge =  0 formula <- get.formula('NH4', charge = 0) isvalid.formula(formula,rule=c(\"nitrogen\",\"RDBE\")) ## [1] FALSE formula <- get.formula('NH4', charge = 1) isvalid.formula(formula,rule=c(\"nitrogen\",\"RDBE\")) ## [1] TRUE mit <- generate.formula.iter(100, charge=0, window=0.1,                              elements=list(c(\"C\",0,50), c(\"H\",0,50), c(\"N\",0,50))) hit <- itertools::ihasNext(mit) while (itertools::hasNext(hit))      print(iterators::nextElem(hit)) ## [1] \"[12]C8[1]H4\" ## [1] \"[12]C7[1]H2[14]N\" ## [1] \"[12]C6[14]N2\" ## [1] \"[12]C4[1]H10[14]N3\" ## [1] \"[12]C3[1]H8[14]N4\" ## [1] \"[12]C2[1]H6[14]N5\" ## [1] \"[12]C[1]H4[14]N6\" ## [1] \"[1]H2[14]N7\""},{"path":"https://cdk-r.github.io/cdkr/articles/molform.html","id":"calculating-isotope-pattern","dir":"Articles","previous_headings":"Handling Molecular Formulae","what":"Calculating Isotope Pattern","title":"Handling Molecular Formulae","text":"Due measurement errors medium resolution spectrometry, given error window can result massive number candidate formulae. isotope pattern ions obtained experimentally can compared theoretical ones. best match reflected probable elemental formula. rcdk provides function get.isotope.pattern predicts theoretical isotope pattern given formula. example generate formula possible compound charge (\\(z \\approx 0\\)) containing standard elements C, H, Cl. isotope pattern can visually inspected, shown .","code":"formula <- get.formula('CHCl3', charge = 0) isotopes <- get.isotopes.pattern(formula,minAbund=0.1) isotopes ##          mass     abund ## [1,] 117.9144 1.0000000 ## [2,] 119.9114 0.9598733 ## [3,] 121.9085 0.3071189 plot(isotopes, type=\"h\", xlab=\"m/z\", ylab=\"Intensity\")"},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/articles/using-rcdk.html","id":"introduction","dir":"Articles","previous_headings":"Using the CDK from R","what":"Introduction","title":"Using the CDK from R","text":"Given much cheminformatics involves mathematical statistical modeling chemical information, R natural platform work. many cheminformatics applications generate useful information descriptors, fingerprints . one can always run applications generate data imported R, can convenient able manipulate chemical structures generate chemical information R environment. CDK Java library cheminformatics supports wide variety cheminformatics functionality ranging reading molecular file formats, performing ring perception aromaticity detection fingerprint generation molecular descriptors. CDK website provides links useful documentation well complete Javadocs","code":""},{"path":"https://cdk-r.github.io/cdkr/articles/using-rcdk.html","id":"getting-started","dir":"Articles","previous_headings":"Using the CDK from R","what":"Getting started","title":"Using the CDK from R","text":"goal rcdk package allow R user access cheminformatics functionality CDK within R. one can use rJava package make direct calls specific methods CDK, R, usage usually follow common R idioms. Thus rcdk aims allow users use CDK classes methods R-like fashion. library loaded follows can also check version CDK used package package also provides example data set, called bpdata contains 277 molecules, SMILES format associated boiling points (BP) Kelvin. data.frame two columns, viz., SMILES BP. Molecules names used row names:","code":"library(rcdk) ## Loading required package: rcdklibs ## Loading required package: rJava cdk.version() ## [1] \"2.8\" ## 'data.frame':    277 obs. of  2 variables: ##  $ SMILES: chr  \"C(Br)(Cl)(Cl)Cl\" \"ClC(F)(F)F\" \"C(Cl)(Cl)(Cl)Cl\" \"C(F)(F)(F)F\" ... ##  $ BP    : num  378 192 350 145 422 ..."},{"path":"https://cdk-r.github.io/cdkr/articles/using-rcdk.html","id":"input-and-output","dir":"Articles","previous_headings":"Using the CDK from R","what":"Input and Output","title":"Using the CDK from R","text":"Chemical structures come variety formats CDK supports many . Many formats disk based files can parsed loaded specifying full paths Note function load file format supported CDK, ’s need specify formats. addition one can specify URL (start http://) specify remote files well. result function list molecule objects. molecule objects class jobjRef (provided rJava package). result,pretty opaque user really meant processed using methods rcdk rJava packages. However, since loads molecules specified file list, large files can lead memory errors. situtation preferable iterate file, one structure time. Currently behavior supported SDF SMILES files. example usage large SD file ","code":"mols <- load.molecules( c('data1.sdf', '/some/path/data2.sdf') ) iter <- iload.molecules('verybig.sdf', type='sdf') while(hasNext(iter)) {  mol <- nextElem(iter)  print(get.property(mol, \"cdk:Title\")) }"},{"path":"https://cdk-r.github.io/cdkr/articles/using-rcdk.html","id":"parsing-smiles","dir":"Articles","previous_headings":"Using the CDK from R > Input and Output","what":"Parsing SMILES","title":"Using the CDK from R","text":"Another common way obtain molecule objects parsing SMILES strings. simplest way Usage efficient multiple SMILE supplied, since single SMILES parser object used parse supplied SMILES. plan parsing large number SMILES, may run memory issues, due large size IAtomContainer objects. case, can useful call Java R garbage collectors explicitly appropriate time. addition can useful explicitly allocate large amount memory JVM. example, Given list molecule objects, possible serialize file specified format. Currently, output formats SMILES SDF. write molecules disk file SDF format. default, mols list multiple molecules, written single SDF file. desired, can write individual files (prefixed value filename):","code":"smile <- 'c1ccccc1CC(=O)C(N)CC1CCCCOC1' mol <- parse.smiles(smile)[[1]] options(\"java.parameters\"=c(\"-Xmx4000m\")) library(rcdk) for (smile in smiles) {     m <- parse.smiles(smile)     ## perform operations on this molecule          jcall(\"java/lang/System\",\"V\",\"gc\")     gc() } write.molecules(mols, filename='mymols.sdf') write.molecules(mols, filename='mymols.sdf', together=FALSE)"},{"path":"https://cdk-r.github.io/cdkr/articles/using-rcdk.html","id":"generating-smiles","dir":"Articles","previous_headings":"Using the CDK from R > Input and Output","what":"Generating SMILES","title":"Using the CDK from R","text":"Finally, can generate SMILES representation molecule using CDK supports number flavors generating SMILES. example, can generate SMILES without chirality information generate SMILES Kekule form. smiles.flavors generates object represents various flavors desired SMILES output. See SmiFlavor javadocs full list possible flavors. Example usage Using CxSmiles flavors allows user encode variety information SMILES string, 2D 3D coordinates.","code":"smiles <- c('CCC', 'c1ccccc1', 'CCCC(C)(C)CC(=O)NC') mols <- parse.smiles(smiles) get.smiles(mols[[1]]) ## [1] \"CCC\" unlist(lapply(mols, get.smiles)) ##                  CCC             c1ccccc1   CCCC(C)(C)CC(=O)NC  ##                \"CCC\"        \"C1=CC=CC=C1\" \"CCCC(C)(C)CC(=O)NC\" smiles <- c('CCC', 'c1ccccc1', 'CCc1ccccc1CC(C)(C)CC(=O)NC') mols <- parse.smiles(smiles) get.smiles(mols[[3]], smiles.flavors(c('UseAromaticSymbols'))) ## [1] \"CCc1ccccc1CC(C)(C)CC(=O)NC\" get.smiles(mols[[3]], smiles.flavors(c('Generic','CxSmiles'))) ## [1] \"CCC1=CC=CC=C1CC(C)(C)CC(=O)NC\" m <- parse.smiles('CCC')[[1]] m <- generate.2d.coordinates(m) m ## [1] \"Java-Object{AtomContainer(720167805, #A:3, AtomRef{Atom(1306854175, S:C, H:3, 2D:[(-1.299038105676659, 1.1102230246251565E-15)], AtomType(1306854175, FC:0, Isotope(1306854175, Element(1306854175, S:C, AN:6))))}, AtomRef{Atom(1742920067, S:C, H:2, 2D:[(-7.771561172376096E-16, 0.7500000000000007)], AtomType(1742920067, FC:0, Isotope(1742920067, Element(1742920067, S:C, AN:6))))}, AtomRef{Atom(1564984895, S:C, H:3, 2D:[(1.887379141862766E-15, 2.250000000000001)], AtomType(1564984895, FC:0, Isotope(1564984895, Element(1564984895, S:C, AN:6))))}, #B:2, BondRef{Bond(1466073198, #O:SINGLE, #S:NONE, #A:2, AtomRef{Atom(1306854175, S:C, H:3, 2D:[(-1.299038105676659, 1.1102230246251565E-15)], AtomType(1306854175, FC:0, Isotope(1306854175, Element(1306854175, S:C, AN:6))))}, AtomRef{Atom(1742920067, S:C, H:2, 2D:[(-7.771561172376096E-16, 0.7500000000000007)], AtomType(1742920067, FC:0, Isotope(1742920067, Element(1742920067, S:C, AN:6))))}, ElectronContainer(1466073198EC:2))}, BondRef{Bond(398690014, #O:SINGLE, #S:NONE, #A:2, AtomRef{Atom(1742920067, S:C, H:2, 2D:[(-7.771561172376096E-16, 0.7500000000000007)], AtomType(1742920067, FC:0, Isotope(1742920067, Element(1742920067, S:C, AN:6))))}, AtomRef{Atom(1564984895, S:C, H:3, 2D:[(1.887379141862766E-15, 2.250000000000001)], AtomType(1564984895, FC:0, Isotope(1564984895, Element(1564984895, S:C, AN:6))))}, ElectronContainer(398690014EC:2))})}\" get.smiles(m, smiles.flavors(c('CxSmiles'))) ## [1] \"CCC\" get.smiles(m, smiles.flavors(c('CxCoordinates'))) ## [1] \"CCC |(-1.3,0,;-0,0.75,;0,2.25,)|\""},{"path":"https://cdk-r.github.io/cdkr/articles/using-rcdk.html","id":"visualization","dir":"Articles","previous_headings":"Using the CDK from R","what":"Visualization","title":"Using the CDK from R","text":"rcdk package supports 2D rendering chemical structures. can used view structure individual molecules multiple molecules tabular format. also possible view molecular-data table, one columns 2D image remainder can contain data associated molecules. Due Java event handling issues OS X, depictions handled using external helper, means depiction generation can slower OS X compared platforms. Molecule visualization performed using view.molecule.2d function. handles individual molecules well list molecules. latter case, depictions arranged grid (4 columns default). CDK depiction routines allow extensive customization. customizations can accessed creating depictor object using get.depictor, allows specify size depiction, depiction style (black white, color white, etc.), atom annotations (e.g., atom index), whether functional group abbreviations used . depictor object, can set individual properties using $ notation. can useful plan generate lot depictions new depictor recreated new structure. method also allows highlight substructures using SMARTS. useful highlight commen substructures set molecules many cases, useful view “molecular spreadsheet”, table molecular structures along information (numeric textual) related molecules viewed. data arranged spreadsheet like manner, one columns molecules remainder textual numeric information. can achieved using view.table method takes list molecule objects data.frame containing associated data. expected, number rows data.frame equal length molecule list. Note currently, explicit binding rows data.frame elements list containing molecules. Thus user take care ordering data.frame matches list. view.molecule.2d function useful visualize structures, depictions can’t included visualizations plots. use cases, view.image.2d function produces raster image can included plots. function handles one molecule time.  Finally, copy.image..clipboard function allows copy depiction system clipboard, can pasted applications. can convenient saving raster image.","code":"smiles <- c('CCC', 'CCN', 'CCN(C)(C)',             'c1ccccc1Cc1ccccc1',             'C1CCC1CC(CN(C)(C))CC(=O)CC') mols <- parse.smiles(smiles) view.molecule.2d(mols[[1]]) view.molecule.2d(mols) depictor <- get.depictor(style='cob', abbr='reagents', width=300, height=300) view.molecule.2d(mols[[5]], depictor=depictor) depictor <- get.depictor(style='cob', abbr='reagents', width=300, height=300) view.molecule.2d(mols[[5]], depictor=depictor) #depictor$setStyle('cow') #view.molecule.2d(mols[[5]], depictor=depictor) depictor <- get.depictor(style='cob', abbr='reagents', sma='N(C)(C)') view.molecule.2d(mols, depictor=depictor) smiles <- c('CCC', 'CCN', 'CCN(C)(C)','c1ccccc1Cc1ccccc1') mols <- parse.smiles(smiles) dframe <- data.frame(x = runif(4),   toxicity = factor(c('Toxic', 'Toxic', 'Nontoxic', 'Nontoxic')),   solubility = c('yes', 'yes', 'no', 'yes')) view.table(mols, dframe) img <- view.image.2d(parse.smiles(\"B([C@H](CC(C)C)NC(=O)[C@H](CC1=CC=CC=C1)NC(=O)C2=NC=CN=C2)(O)O\")[[1]]) plot(1:10, 1:10, pch=19) rasterImage(img, 1,6, 5,10)"},{"path":"https://cdk-r.github.io/cdkr/articles/using-rcdk.html","id":"manipulating-molecules","dir":"Articles","previous_headings":"Using the CDK from R","what":"Manipulating Molecules","title":"Using the CDK from R","text":"general, given jobjRef molecule object one can access class methods CDK library via rJava. However can cumbersome. rcdk package exposes methods classes manipulate molecules.","code":""},{"path":"https://cdk-r.github.io/cdkr/articles/using-rcdk.html","id":"adding-information-to-molecules","dir":"Articles","previous_headings":"Using the CDK from R > Manipulating Molecules","what":"Adding Information to Molecules","title":"Using the CDK from R","text":"many scenarios ’s useful associate information molecules. Within R, always create data.frame store molecule objects along relevant information . However, serializing molecules, want able store associated information structure (though keep mind certain chemical file formats support metadata along structure). Using CDK ’s possible directly add information molecule object using properties. Note adding properties uses key-value paradigm, key class character. value can class integer, double, character jobjRef. Obviously, setting property, can get property key. also possible get available properties list. property names used list names. adding properties molecule, can write SD file, property values become SD tags.","code":"mol <- parse.smiles('c1ccccc1')[[1]] set.property(mol, \"title\", \"Molecule 1\") set.property(mol, \"hvyAtomCount\", 6) get.property(mol, \"title\") ## [1] \"Molecule 1\" get.properties(mol) ## $`cdk:Title` ## [1] NA ##  ## $title ## [1] \"Molecule 1\" ##  ## $hvyAtomCount ## [1] 6 write.molecules(mol, 'tagged.sdf', write.props=TRUE)"},{"path":"https://cdk-r.github.io/cdkr/articles/using-rcdk.html","id":"atoms-and-bonds","dir":"Articles","previous_headings":"Using the CDK from R > Manipulating Molecules","what":"Atoms and Bonds","title":"Using the CDK from R","text":"Probably important thing get atoms bonds molecule. code gets atoms bonds lists jobjRef objects, can manipulated using rJava via methods package. Given atom rcdk package offer lot methods operate . One must access CDK directly. future manipulators added. Right now, can get symbol atom ’s also possible get 3D (2D coordinates) atom. Given , ’s quite easy get 3D coordinate matrix molecule coordinate matrix, quick way check whether molecule flat quite simplistic check just looks whether X, Y Z coordinates constant. rigorous one evaluate moments inertia axes.","code":"mol <- parse.smiles('c1ccccc1C(Cl)(Br)c1ccccc1')[[1]] atoms <- get.atoms(mol) bonds <- get.bonds(mol) cat('No. of atoms =', length(atoms), '\\n') ## No. of atoms = 15 cat('No. of bonds =', length(bonds), '\\n') ## No. of bonds = 16 unlist(lapply(atoms, get.symbol)) ##  [1] \"C\"  \"C\"  \"C\"  \"C\"  \"C\"  \"C\"  \"C\"  \"Cl\" \"Br\" \"C\"  \"C\"  \"C\"  \"C\"  \"C\"  \"C\" coords <- get.point3d(atoms[[1]]) coords <- do.call('rbind', lapply(atoms, get.point3d)) if ( any(apply(coords, 2, function(x) length(unique(x))) == 1) ) {     print(\"molecule is flat\") } ## [1] \"molecule is flat\""},{"path":"https://cdk-r.github.io/cdkr/articles/using-rcdk.html","id":"substructure-matching","dir":"Articles","previous_headings":"Using the CDK from R > Manipulating Molecules","what":"Substructure matching","title":"Using the CDK from R","text":"CDK library supports substructure searches using SMARTS (SMILES) patterns. implementation allows one check whether target molecule contains substructure well retrieve atoms bonds target molecule match query substructure. point, rcdk support former operation - given query pattern, occur list target molecules. matches method package returns logical vector \\(\\)’th element TRUE \\(\\)’th target molecules contains query substructure. example usage identify molecules contain carbon atom exactly two bonded neighbors.","code":"mols <- parse.smiles(c('CC(C)(C)C','c1ccc(Cl)cc1C(=O)O', 'CCC(N)(N)CC')) query <- '[#6D2]' matches(query, mols) ##          CC(C)(C)C.match c1ccc(Cl)cc1C(=O)O.match        CCC(N)(N)CC.match  ##                    FALSE                     TRUE                     TRUE"},{"path":"https://cdk-r.github.io/cdkr/articles/using-rcdk.html","id":"molecular-descriptors","dir":"Articles","previous_headings":"Using the CDK from R","what":"Molecular Descriptors","title":"Using the CDK from R","text":"key requirement predictive modeling molecular properties activities molecular descriptors - numerical characterizations molecular structure. CDK implements variety molecular descriptors, categorized topological, constitutional, geometric, electronic hybrid. possible evaluate available descriptors one go, evaluate individual descriptors. First, can take look available descriptor categories. Given categories can get names descriptors single category. course, can always provide category name directly. descriptor name actually fully qualified Java class name corresponding descriptor. names can supplied eval.desc evaluate single multiple descriptors one molecules. return value eval.desc data.frame descriptors columns molecules rows. example get single row. given list molecules, can easily get descriptor matrix. example, let’s build linear regression model predict boiling points BP dataset. First need set descriptors evaluate available descriptors. Also note since descriptor might belong one category, obtain unique set descriptor names current discussion focus , manually selected descriptors know related boiling point. descriptor value computed, ’s value set NA. may happen descriptor requires 3D coordinates, 2D coordinates available. case, manually selected descriptors undefined values. Given ubiquity certain descriptors, directly available via functions. Specifically, one can calculate TPSA (topological polar surface area), AlogP XlogP without go eval.desc. (Note AlogP XlogP assume hydrogens explicitly specified molecule. may true molecules obtained SMILES) Now descriptor matrix, easily build linear regression model. First, remove NA’s, correlated constant columns. code shown , since involves stochastic element, run example. perform feature selection, type reduction performed. Note correlation reduction step pretty crude better ways . Given reduced descriptor matrix, can perform feature selection (say using leaps, caret GA identify suitable subset descriptors. Given selected descriptors hand, can skip section, directly build model generate plot predicted versus observed BP. (Note toy example example good QSAR practice!)","code":"dc <- get.desc.categories() dc ## [1] \"protein\"        \"hybrid\"         \"constitutional\" \"topological\"    ## [5] \"electronic\"     \"geometrical\" dn <- get.desc.names(dc[4]) dn ##  [1] \"org.openscience.cdk.qsar.descriptors.molecular.SmallRingDescriptor\"                     ##  [2] \"org.openscience.cdk.qsar.descriptors.molecular.FractionalPSADescriptor\"                 ##  [3] \"org.openscience.cdk.qsar.descriptors.molecular.ZagrebIndexDescriptor\"                   ##  [4] \"org.openscience.cdk.qsar.descriptors.molecular.WienerNumbersDescriptor\"                 ##  [5] \"org.openscience.cdk.qsar.descriptors.molecular.WeightedPathDescriptor\"                  ##  [6] \"org.openscience.cdk.qsar.descriptors.molecular.VAdjMaDescriptor\"                        ##  [7] \"org.openscience.cdk.qsar.descriptors.molecular.VABCDescriptor\"                          ##  [8] \"org.openscience.cdk.qsar.descriptors.molecular.TPSADescriptor\"                          ##  [9] \"org.openscience.cdk.qsar.descriptors.molecular.PetitjeanShapeIndexDescriptor\"           ## [10] \"org.openscience.cdk.qsar.descriptors.molecular.PetitjeanNumberDescriptor\"               ## [11] \"org.openscience.cdk.qsar.descriptors.molecular.MDEDescriptor\"                           ## [12] \"org.openscience.cdk.qsar.descriptors.molecular.KierHallSmartsDescriptor\"                ## [13] \"org.openscience.cdk.qsar.descriptors.molecular.KappaShapeIndicesDescriptor\"             ## [14] \"org.openscience.cdk.qsar.descriptors.molecular.HybridizationRatioDescriptor\"            ## [15] \"org.openscience.cdk.qsar.descriptors.molecular.FragmentComplexityDescriptor\"            ## [16] \"org.openscience.cdk.qsar.descriptors.molecular.FMFDescriptor\"                           ## [17] \"org.openscience.cdk.qsar.descriptors.molecular.EccentricConnectivityIndexDescriptor\"    ## [18] \"org.openscience.cdk.qsar.descriptors.molecular.ChiPathDescriptor\"                       ## [19] \"org.openscience.cdk.qsar.descriptors.molecular.ChiPathClusterDescriptor\"                ## [20] \"org.openscience.cdk.qsar.descriptors.molecular.ChiClusterDescriptor\"                    ## [21] \"org.openscience.cdk.qsar.descriptors.molecular.ChiChainDescriptor\"                      ## [22] \"org.openscience.cdk.qsar.descriptors.molecular.CarbonTypesDescriptor\"                   ## [23] \"org.openscience.cdk.qsar.descriptors.molecular.AutocorrelationDescriptorPolarizability\" ## [24] \"org.openscience.cdk.qsar.descriptors.molecular.AutocorrelationDescriptorMass\"           ## [25] \"org.openscience.cdk.qsar.descriptors.molecular.AutocorrelationDescriptorCharge\" aDesc <- eval.desc(mol, dn[4]) allDescs <- eval.desc(mol, dn) descNames <- unique(unlist(sapply(get.desc.categories(), get.desc.names))) data(bpdata) mols <- parse.smiles(bpdata[,1]) descNames <- c(  'org.openscience.cdk.qsar.descriptors.molecular.KierHallSmartsDescriptor',  'org.openscience.cdk.qsar.descriptors.molecular.APolDescriptor',  'org.openscience.cdk.qsar.descriptors.molecular.HBondDonorCountDescriptor') descs <- eval.desc(mols, descNames) class(descs) ## [1] \"data.frame\" dim(descs) ## [1] 277  81 mol <- parse.smiles('CC(=O)CC(=O)NCN')[[1]] convert.implicit.to.explicit(mol) get.tpsa(mol) ## [1] 72.19 get.xlogp(mol) ## [1] -0.883 get.alogp(mol) ## [1] -1.7019 descs <- descs[, !apply(descs, 2, function(x) any(is.na(x)) )] descs <- descs[, !apply( descs, 2, function(x) length(unique(x)) == 1 )] r2 <- which(cor(descs)^2 > .6, arr.ind=TRUE) r2 <- r2[ r2[,1] > r2[,2] , ] descs <- descs[, -unique(r2[,2])] model <- lm(BP ~ khs.sCH3 + khs.sF + apol + nHBDon, data.frame(bpdata, descs)) summary(model) ##  ## Call: ## lm(formula = BP ~ khs.sCH3 + khs.sF + apol + nHBDon, data = data.frame(bpdata,  ##     descs)) ##  ## Residuals: ##     Min      1Q  Median      3Q     Max  ## -94.395 -20.911  -1.168  19.574 114.237  ##  ## Coefficients: ##             Estimate Std. Error t value Pr(>|t|)     ## (Intercept) 267.3135     6.0006  44.548   <2e-16 *** ## khs.sCH3    -22.7948     2.0676 -11.025   <2e-16 *** ## khs.sF      -24.4121     2.6548  -9.196   <2e-16 *** ## apol          8.6211     0.3132  27.523   <2e-16 *** ## nHBDon       47.1187     3.7061  12.714   <2e-16 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 34.08 on 272 degrees of freedom ## Multiple R-squared:  0.837,  Adjusted R-squared:  0.8346  ## F-statistic: 349.1 on 4 and 272 DF,  p-value: < 2.2e-16 plot(bpdata$BP, predict(model, descs),      xlab=\"Observed BP\", ylab=\"Predicted BP\",      pch=19, xlim=c(100, 700), ylim=c(100, 700)) abline(0,1, col='red')"},{"path":"https://cdk-r.github.io/cdkr/articles/using-rcdk.html","id":"fingerprints","dir":"Articles","previous_headings":"Using the CDK from R","what":"Fingerprints","title":"Using the CDK from R","text":"Fingerprints common representation used variety purposes similarity searching predictive modeling. CDK provides variety fingerprints ranging path-based hashed fingerprints circular (specifically, implementation fo ECFP fingerprints) signature fingerprints (based signature molecular descriptor). fingerprints represented binary strings integer vectors. rcdk employs fingerprint package support operations resultant fingerprints. section, present example using fingerprints generate hierarchical clustering set molecules included boiling point dataset. first parse SMILES molecules dataset compute fingerprints, specifying circular type. fingerprints, can compute pairwise similarity matrix using Tanimoto metric. Since R’s hclust method requires distance matrix, convert similarity matrix distance matrix Finally, can perform clustering. case use hclust method though R’s clustering methods used.  Another common task fingerprints similarity searching. , given collection target molecules, find molecules similar query molecule. achieved evaluating similarity metric query target molecules. target molecules exceeding user defined cutoff returned. help fingerprint package easily accomplished. example, can identify molecules BP dataset Tanimoto similarity 0.3 acetalehyde, create tabular summary. Note also accomplished molecular descriptors, case ’d probably evaluate Euclidean distance descriptor vectors.","code":"data(bpdata) mols <- parse.smiles(bpdata[,1]) fps <- lapply(mols, get.fingerprint, type='circular') fp.sim <- fingerprint::fp.sim.matrix(fps, method='tanimoto') fp.dist <- 1 - fp.sim cls <- hclust(as.dist(fp.dist)) plot(cls, main='A Clustering of the BP dataset', labels=FALSE) query.mol <- parse.smiles('CC(=O)')[[1]] target.mols <- parse.smiles(bpdata[,1]) query.fp <- get.fingerprint(query.mol, type='circular') target.fps <- lapply(target.mols, get.fingerprint, type='circular') sims <- data.frame(sim=do.call(rbind, lapply(target.fps,      fingerprint::distance,      fp2=query.fp, method='tanimoto'))) subset(sims, sim >= 0.3) ##                sim ## C(=O)O   0.3333333 ## COC=O    0.3636364 ## CCC=O    0.3636364 ## CC(C)C=O 0.3636364"},{"path":"https://cdk-r.github.io/cdkr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rajarshi Guha. Author, copyright holder. Zachary Charlop-Powers. Maintainer. Emma Schymanski. Contributor.","code":""},{"path":"https://cdk-r.github.io/cdkr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Guha, R. (2007). 'Chemical Informatics Functionality R'. Journal Statistical Software 6(18)","code":"@Article{,   author = {Rajarshi Guha},   journal = {Journal of Statistical Software},   number = {6},   title = {Chemical Informatics Functionality in R},   volume = {18},   year = {2007}, }"},{"path":"https://cdk-r.github.io/cdkr/reference/Atoms.html","id":null,"dir":"Reference","previous_headings":"","what":"Operations on Atoms — Atoms","title":"Operations on Atoms — Atoms","text":"get.symbol returns chemical symbol atom get.point3d returns 3D coordinates atom get.point2d returns 2D coordinates atom get.atomic.number returns atomic number atom get.hydrogen.count  returns number implicit H’s atom.            Depending molecule read may NULL           integer greater equal 0 get.charge returns partial charge atom. charges            set return value NULL, otherwise            appropriate charge. get.formal.charge returns formal charge atom.             default formal charge 0 (.e., NULL            never returned) .aromatic returns TRUE atom aromatic,            FALSE otherwise .aliphatic returns TRUE atom part             aliphatic chain, FALSE otherwise ..ring returns TRUE atom ring,              FALSE otherwise get.atom.index eturns index atom molecule             (starting 0) get.connected.atoms returns list atoms connected specified atom","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/Atoms.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Operations on Atoms — Atoms","text":"get.symbol(atom) get.point3d(atom) get.point2d(atom) get.atomic.number(atom) get.hydrogen.count(atom) get.charge(atom) get.formal.charge(atom) get.connected.atoms(atom, mol) get.atom.index(atom, mol) .aromatic(atom) .aliphatic(atom) ..ring(atom)  set.atom.types(mol)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/Atoms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Operations on Atoms — Atoms","text":"atom jobjRef representing IAtom object  mol  jobjRef representing IAtomContainer object","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/Atoms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Operations on Atoms — Atoms","text":"case get.point3d return value 3-element vector   containing X, Y Z co-ordinates atom.  atom   3D coordinates, returns vector form c(NA,NA,NA).  Similarly get.point2d, case return vector   length 2.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/Atoms.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Operations on Atoms — Atoms","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/Molecule.html","id":null,"dir":"Reference","previous_headings":"","what":"Operations on molecules — Molecule","title":"Operations on molecules — Molecule","text":"Various functions perform operations molecules. get.exact.mass returns exact mass molecule get.natural.mass returns natural exact mass molecule convert.implicit..explicit converts implicit hydrogens      explicit hydrogens. function return value rather      modifies molecule object passed  .neutral returns TRUE atoms molecule     formal charge 0, otherwise FALSE","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/Molecule.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Operations on molecules — Molecule","text":"cases, molecule may hydrogens (read  MDL MOLfile hydrogens). cases, convert.implicit..explicit add implicit hydrogens  convert explicit ones.  addition, cases, make sure  molecule typed beforehand.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/Molecule.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Operations on molecules — Molecule","text":"get.exact.mass(mol) get.natural.mass(mol) convert.implicit..explicit(mol) .neutral(mol)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/Molecule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Operations on molecules — Molecule","text":"mol  jobjRef representing IAtomContainer IMolecule object","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/Molecule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Operations on molecules — Molecule","text":"get.exact.mass returns numeric   get.natural.mass returns numeric  convert.implicit..explicit return value  .neutral returns boolean.","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/Molecule.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Operations on molecules — Molecule","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/bpdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Boiling Point Data — bpdata","title":"Boiling Point Data — bpdata","text":"dataset containing structures associated boiling  points 277 molecules, primarily alkanes substituted alkanes.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/bpdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boiling Point Data — bpdata","text":"","code":"bpdata"},{"path":"https://cdk-r.github.io/cdkr/reference/bpdata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Boiling Point Data — bpdata","text":"data frame 277 rows 2 columns.: SMILES Structure SMILES format BP Boiling point Kelvin names molecules used row names.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/bpdata.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Boiling Point Data — bpdata","text":"Goll, E.S. Jurs, P.C.; \"Prediction Normal Boiling Points  Organic Compounds Molecular Structures Computational  Neural Network Model\", J. Chem. Inf. Comput. Sci., 1999,   39, 974-983.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/cdk.version.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the current CDK version used in the package. — cdk.version","title":"Get the current CDK version used in the package. — cdk.version","text":"Get current CDK version used package.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/cdk.version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the current CDK version used in the package. — cdk.version","text":"","code":"cdk.version()"},{"path":"https://cdk-r.github.io/cdkr/reference/cdk.version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the current CDK version used in the package. — cdk.version","text":"Returns character containing version CDK used package","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/cdk.version.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the current CDK version used in the package. — cdk.version","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/cdkFormula-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class cdkFormula, ac class for handling molecular formula — cdkFormula-class","title":"Class cdkFormula, ac class for handling molecular formula — cdkFormula-class","text":"class handles molecular formulae. provides extra   information IMolecularFormula Java object, elements contained   number .","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/cdkFormula-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class cdkFormula, ac class for handling molecular formula — cdkFormula-class","text":"Objects can created using new constructor filled specific    mass window accuracy","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/cdkFormula-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Class cdkFormula, ac class for handling molecular formula — cdkFormula-class","text":"parallel effort expand Chemistry Development    Kit: https://cdk.github.io/","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/cdkFormula-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class cdkFormula, ac class for handling molecular formula — cdkFormula-class","text":"Miguel Rojas-Cherto (miguelrojasch@yahoo.es)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/compare.isotope.pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare isotope patterns. — compare.isotope.pattern","title":"Compare isotope patterns. — compare.isotope.pattern","text":"Computes similarity score two different isotope abundance patterns.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/compare.isotope.pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare isotope patterns. — compare.isotope.pattern","text":"","code":"compare.isotope.pattern(iso1, iso2, ips = NULL)"},{"path":"https://cdk-r.github.io/cdkr/reference/compare.isotope.pattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare isotope patterns. — compare.isotope.pattern","text":"iso1 first isotope pattern, jobjRef corresponding IsotopePattern class iso2 second isotope pattern, jobjRef corresponding IsotopePattern class ips instance IsotopePatternSimilarity class. NULL one constructed automatically","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/compare.isotope.pattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare isotope patterns. — compare.isotope.pattern","text":"numeric value 0 1 indicating similarity two patterns","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/compare.isotope.pattern.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compare isotope patterns. — compare.isotope.pattern","text":"http://cdk.github.io/cdk/2.3/docs/api/org/openscience/cdk/formula/IsotopePatternSimilarity.html","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/compare.isotope.pattern.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compare isotope patterns. — compare.isotope.pattern","text":"Miguel Rojas Cherto","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/convert.implicit.to.explicit.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert implicit hydrogens to explicit. — convert.implicit.to.explicit","title":"Convert implicit hydrogens to explicit. — convert.implicit.to.explicit","text":"cases, molecule may hydrogens (read MDL MOL file hydrogens SMILES explicit hydrogens). cases, method add implicit hydrogens convert explicit ones.  newly added H's 2D 3D coordinates associated . Ensure molecule typed beforehand.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/convert.implicit.to.explicit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert implicit hydrogens to explicit. — convert.implicit.to.explicit","text":"","code":"convert.implicit.to.explicit(mol)"},{"path":"https://cdk-r.github.io/cdkr/reference/convert.implicit.to.explicit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert implicit hydrogens to explicit. — convert.implicit.to.explicit","text":"mol molecule query. `jobjRef` representing `IAtomContainer`","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/convert.implicit.to.explicit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert implicit hydrogens to explicit. — convert.implicit.to.explicit","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/copy.image.to.clipboard.html","id":null,"dir":"Reference","previous_headings":"","what":"copy.image.to.clipboard — copy.image.to.clipboard","title":"copy.image.to.clipboard — copy.image.to.clipboard","text":"generate image make available system clipboard.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/copy.image.to.clipboard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"copy.image.to.clipboard — copy.image.to.clipboard","text":"","code":"copy.image.to.clipboard(molecule, depictor = NULL)"},{"path":"https://cdk-r.github.io/cdkr/reference/copy.image.to.clipboard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"copy.image.to.clipboard — copy.image.to.clipboard","text":"molecule molecule query. `jobjRef` representing `IAtomContainer` depictor Optional. Default NULL. Depictor get.depictor","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/do.aromaticity.html","id":null,"dir":"Reference","previous_headings":"","what":"do.aromaticity — do.aromaticity","title":"do.aromaticity — do.aromaticity","text":"detect aromaticity input compound","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/do.aromaticity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"do.aromaticity — do.aromaticity","text":"","code":"do.aromaticity(mol)"},{"path":"https://cdk-r.github.io/cdkr/reference/do.aromaticity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"do.aromaticity — do.aromaticity","text":"mol molecule query. `jobjRef` representing `IAtomContainer`","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/do.isotopes.html","id":null,"dir":"Reference","previous_headings":"","what":"do.isotopes — do.isotopes","title":"do.isotopes — do.isotopes","text":"configure isotopes","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/do.isotopes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"do.isotopes — do.isotopes","text":"","code":"do.isotopes(mol)"},{"path":"https://cdk-r.github.io/cdkr/reference/do.isotopes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"do.isotopes — do.isotopes","text":"mol molecule query. `jobjRef` representing `IAtomContainer`","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/eval.atomic.desc.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute descriptors for each atom in a molecule — eval.atomic.desc","title":"Compute descriptors for each atom in a molecule — eval.atomic.desc","text":"Compute descriptors atom molecule","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/eval.atomic.desc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute descriptors for each atom in a molecule — eval.atomic.desc","text":"","code":"eval.atomic.desc(molecule, which.desc, verbose = FALSE)"},{"path":"https://cdk-r.github.io/cdkr/reference/eval.atomic.desc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute descriptors for each atom in a molecule — eval.atomic.desc","text":"molecule molecule object .desc character vector atomic descriptor class names verbose Optional. Default FALSE. Toggle verbosity.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/eval.atomic.desc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute descriptors for each atom in a molecule — eval.atomic.desc","text":"`data.frame` atoms rows descriptors columns","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/eval.atomic.desc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute descriptors for each atom in a molecule — eval.atomic.desc","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/eval.desc.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute descriptor values for a set of molecules — eval.desc","title":"Compute descriptor values for a set of molecules — eval.desc","text":"Compute descriptor values set molecules","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/eval.desc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute descriptor values for a set of molecules — eval.desc","text":"","code":"eval.desc(molecules, which.desc, verbose = FALSE)"},{"path":"https://cdk-r.github.io/cdkr/reference/eval.desc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute descriptor values for a set of molecules — eval.desc","text":"molecules `list` molecule objects .desc character vector listing descriptor class names verbose `TRUE`, verbose output","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/eval.desc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute descriptor values for a set of molecules — eval.desc","text":"`data.frame` molecules rows descriptors columns. descriptor value computed molecule, `NA` returned.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/eval.desc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute descriptor values for a set of molecules — eval.desc","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/generate.2d.coordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate 2D coordinates for a molecule. — generate.2d.coordinates","title":"Generate 2D coordinates for a molecule. — generate.2d.coordinates","text":"file formats SMILES support 2D (3D) coordinates atoms. formats SD MOL support coordinates may include . method generate reasonable 2D coordinates  based purely connectivity information, overwriting existing coordinates present.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/generate.2d.coordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate 2D coordinates for a molecule. — generate.2d.coordinates","text":"","code":"generate.2d.coordinates(mol)"},{"path":"https://cdk-r.github.io/cdkr/reference/generate.2d.coordinates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate 2D coordinates for a molecule. — generate.2d.coordinates","text":"mol molecule query. `jobjRef` representing `IAtomContainer`","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/generate.2d.coordinates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate 2D coordinates for a molecule. — generate.2d.coordinates","text":"input molecule, 2D coordinates added","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/generate.2d.coordinates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate 2D coordinates for a molecule. — generate.2d.coordinates","text":"Note depicting molecule (view.molecule.2d), 2D coordinates generated, since modify input molecule, access generated coordinates.","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/generate.2d.coordinates.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate 2D coordinates for a molecule. — generate.2d.coordinates","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/generate.formula.html","id":null,"dir":"Reference","previous_headings":"","what":"generate.formula — generate.formula","title":"generate.formula — generate.formula","text":"generate.formula","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/generate.formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate.formula — generate.formula","text":"","code":"generate.formula(   mass,   window = 0.01,   elements = list(c(\"C\", 0, 50), c(\"H\", 0, 50), c(\"N\", 0, 50), c(\"O\", 0, 50), c(\"S\", 0,     50)),   validation = FALSE,   charge = 0 )"},{"path":"https://cdk-r.github.io/cdkr/reference/generate.formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate.formula — generate.formula","text":"mass Required. Mass. window Optional. Default 0.01 elements Optional. Default  list(c('C', 0,50), c('H', 0,50),  c('N', 0,50), c('O', 0,50), c('S', 0,50)) validation Optional. Default FALSE charge Optional. Default FALSE","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/generate.formula.iter.html","id":null,"dir":"Reference","previous_headings":"","what":"generate.formula.iter — generate.formula.iter","title":"generate.formula.iter — generate.formula.iter","text":"Generate list possible formula objects given mass mass tolerance.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/generate.formula.iter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate.formula.iter — generate.formula.iter","text":"","code":"generate.formula.iter(   mass,   window = 0.01,   elements = list(c(\"C\", 0, 50), c(\"H\", 0, 50), c(\"N\", 0, 50), c(\"O\", 0, 50), c(\"S\", 0,     50)),   validation = FALSE,   charge = 0,   as.string = TRUE )"},{"path":"https://cdk-r.github.io/cdkr/reference/generate.formula.iter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate.formula.iter — generate.formula.iter","text":"mass Required. Mass. window Optional. Default 0.01 elements Optional. Default  list(c('C', 0,50), c('H', 0,50),  c('N', 0,50), c('O', 0,50), c('S', 0,50)) validation Optional. Default FALSE charge Optional. Default FALSE .string Optional. Default FALSE","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.adjacency.matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Get adjacency matrix for a molecule. — get.adjacency.matrix","title":"Get adjacency matrix for a molecule. — get.adjacency.matrix","text":"adjacency matrix molecule \\(N\\) non-hydrogen atoms \\(N \\times N\\) matrix element [\\(\\),\\(j\\)] set 1 atoms \\(\\) \\(j\\) connected bond, otherwise set 0.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.adjacency.matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get adjacency matrix for a molecule. — get.adjacency.matrix","text":"","code":"get.adjacency.matrix(mol)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.adjacency.matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get adjacency matrix for a molecule. — get.adjacency.matrix","text":"mol jobjRef object Java class IAtomContainer","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.adjacency.matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get adjacency matrix for a molecule. — get.adjacency.matrix","text":"\\(N \\times N\\) numeric matrix","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/get.adjacency.matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get adjacency matrix for a molecule. — get.adjacency.matrix","text":"Rajarshi Guha rajarshi.guha@gmail.com","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.adjacency.matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get adjacency matrix for a molecule. — get.adjacency.matrix","text":"","code":"m <- parse.smiles(\"CC=C\")[[1]] get.adjacency.matrix(m) #>      [,1] [,2] [,3] #> [1,]    0    1    0 #> [2,]    1    0    1 #> [3,]    0    1    0"},{"path":"https://cdk-r.github.io/cdkr/reference/get.alogp.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute ALogP for a molecule — get.alogp","title":"Compute ALogP for a molecule — get.alogp","text":"Compute ALogP molecule","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.alogp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute ALogP for a molecule — get.alogp","text":"","code":"get.alogp(molecule)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.alogp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute ALogP for a molecule — get.alogp","text":"molecule molecule object","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.alogp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute ALogP for a molecule — get.alogp","text":"double value representing ALogP value","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.alogp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute ALogP for a molecule — get.alogp","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.atom.count.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the number of atoms in the molecule. — get.atom.count","title":"Get the number of atoms in the molecule. — get.atom.count","text":"Get number atoms molecule.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.atom.count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the number of atoms in the molecule. — get.atom.count","text":"","code":"get.atom.count(mol)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.atom.count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the number of atoms in the molecule. — get.atom.count","text":"mol molecule query. `jobjRef` representing `IAtomContainer`","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.atom.count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the number of atoms in the molecule. — get.atom.count","text":"integer representing number atoms molecule","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.atom.count.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the number of atoms in the molecule. — get.atom.count","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.atom.index.html","id":null,"dir":"Reference","previous_headings":"","what":"get.atom.index — get.atom.index","title":"get.atom.index — get.atom.index","text":"Get index atom molecule.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.atom.index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get.atom.index — get.atom.index","text":"","code":"get.atom.index(atom, mol)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.atom.index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get.atom.index — get.atom.index","text":"atom atom object mol `IAtomContainer` object containing atom","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.atom.index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get.atom.index — get.atom.index","text":"integer representing atom index.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.atom.index.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"get.atom.index — get.atom.index","text":"Acces index atom context IAtomContainer.  Indexing starts 0. index known, -1 returned.","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/get.atom.index.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"get.atom.index — get.atom.index","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.atomic.desc.names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get class names for atomic descriptors — get.atomic.desc.names","title":"Get class names for atomic descriptors — get.atomic.desc.names","text":"Get class names atomic descriptors","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.atomic.desc.names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get class names for atomic descriptors — get.atomic.desc.names","text":"","code":"get.atomic.desc.names(type = \"all\")"},{"path":"https://cdk-r.github.io/cdkr/reference/get.atomic.desc.names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get class names for atomic descriptors — get.atomic.desc.names","text":"type string indicating class descriptors return. Specifying `\"\"` return class names molecular descriptors. Options include * topological * geometrical * hybrid * constitutional * protein * electronic","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.atomic.desc.names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get class names for atomic descriptors — get.atomic.desc.names","text":"character vector containing class names atomic descriptors","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.atomic.desc.names.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get class names for atomic descriptors — get.atomic.desc.names","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.atomic.number.html","id":null,"dir":"Reference","previous_headings":"","what":"get.atomic.number — get.atomic.number","title":"get.atomic.number — get.atomic.number","text":"Get atomic number atom.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.atomic.number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get.atomic.number — get.atomic.number","text":"","code":"get.atomic.number(atom)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.atomic.number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get.atomic.number — get.atomic.number","text":"atom atom query","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.atomic.number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get.atomic.number — get.atomic.number","text":"integer representing atomic number","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.atomic.number.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"get.atomic.number — get.atomic.number","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.atoms.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the atoms from a molecule or bond. — get.atoms","title":"Get the atoms from a molecule or bond. — get.atoms","text":"Get atoms molecule bond.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.atoms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the atoms from a molecule or bond. — get.atoms","text":"","code":"get.atoms(object)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.atoms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the atoms from a molecule or bond. — get.atoms","text":"object `jobjRef` representing either molecule (`IAtomContainer`)  bond (`IBond`) object.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.atoms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the atoms from a molecule or bond. — get.atoms","text":"list `jobjRef` representing `IAtom` objects molecule bond","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/get.atoms.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the atoms from a molecule or bond. — get.atoms","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.bond.order.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an object representing bond order — get.bond.order","title":"Get an object representing bond order — get.bond.order","text":"function returns Java enum representing bond order. can used modify order pre-existing bonds","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.bond.order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an object representing bond order — get.bond.order","text":"","code":"get.bond.order(order = \"single\")"},{"path":"https://cdk-r.github.io/cdkr/reference/get.bond.order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an object representing bond order — get.bond.order","text":"order character vector can one single, double, triple, quadruple, quintuple, sextuple unset. Case ignored","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.bond.order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an object representing bond order — get.bond.order","text":"jObjRef representing `Order` enum object","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.bond.order.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get an object representing bond order — get.bond.order","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.bond.order.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get an object representing bond order — get.bond.order","text":"","code":"if (FALSE) { m <- parse.smiles('CCN')[[1]] b <- get.bonds(m)[[1]] b$setOrder(get.bond.order(\"double\")) }"},{"path":"https://cdk-r.github.io/cdkr/reference/get.bonds.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the bonds in a molecule. — get.bonds","title":"Get the bonds in a molecule. — get.bonds","text":"Get bonds molecule.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.bonds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the bonds in a molecule. — get.bonds","text":"","code":"get.bonds(mol)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.bonds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the bonds in a molecule. — get.bonds","text":"mol `jobjRef` representing molecule (`IAtomContainer`) object.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.bonds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the bonds in a molecule. — get.bonds","text":"list `jobjRef` representing bonds (`IBond`) objects molecule","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/get.bonds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the bonds in a molecule. — get.bonds","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.charge.html","id":null,"dir":"Reference","previous_headings":"","what":"get.charge — get.charge","title":"get.charge — get.charge","text":"Get charge atom.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.charge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get.charge — get.charge","text":"","code":"get.charge(atom)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.charge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get.charge — get.charge","text":"atom atom query","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.charge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get.charge — get.charge","text":"numeric representing partial charge. charges set, `NULL` returned","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.charge.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"get.charge — get.charge","text":"method returns partial charge atom. charges set return value NULL, otherwise appropriate charge.","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/get.charge.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"get.charge — get.charge","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.chem.object.builder.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the default chemical object builder. — get.chem.object.builder","title":"Get the default chemical object builder. — get.chem.object.builder","text":"CDK employs builder design pattern construct instances new chemical objects (e.g., atoms, bonds, parsers ). Many methods require instance builder  object function. functions package handle internally, useful able get instance builder object directly working CDK API via `rJava`.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.chem.object.builder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the default chemical object builder. — get.chem.object.builder","text":"","code":"get.chem.object.builder()"},{"path":"https://cdk-r.github.io/cdkr/reference/get.chem.object.builder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the default chemical object builder. — get.chem.object.builder","text":"instance SilentChemObjectBuilder","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.chem.object.builder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the default chemical object builder. — get.chem.object.builder","text":"method returns instance SilentChemObjectBuilder.  Note static object created package load time,  instance returned whenever function called.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.chem.object.builder.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the default chemical object builder. — get.chem.object.builder","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.connected.atom.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the atom connected to an atom in a bond. — get.connected.atom","title":"Get the atom connected to an atom in a bond. — get.connected.atom","text":"function returns atom connected specified specified bond. Note function assumes 2-atom bonds, mainly CDK currently support types bonds","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.connected.atom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the atom connected to an atom in a bond. — get.connected.atom","text":"","code":"get.connected.atom(bond, atom)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.connected.atom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the atom connected to an atom in a bond. — get.connected.atom","text":"bond jObjRef representing `IBond` object atom jObjRef representing `IAtom` object","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.connected.atom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the atom connected to an atom in a bond. — get.connected.atom","text":"jObjRef representing `IAtom`` object","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/get.connected.atom.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the atom connected to an atom in a bond. — get.connected.atom","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.connected.atoms.html","id":null,"dir":"Reference","previous_headings":"","what":"get.connected.atoms — get.connected.atoms","title":"get.connected.atoms — get.connected.atoms","text":"Get atoms connected specified atom","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.connected.atoms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get.connected.atoms — get.connected.atoms","text":"","code":"get.connected.atoms(atom, mol)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.connected.atoms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get.connected.atoms — get.connected.atoms","text":"atom atom object mol `IAtomContainer` object containing atom","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.connected.atoms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get.connected.atoms — get.connected.atoms","text":"`list` containing `IAtom` objects, representing atoms directly connected specified atom","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.connected.atoms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"get.connected.atoms — get.connected.atoms","text":"Returns `list`` atoms connected specified atom.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.connected.atoms.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"get.connected.atoms — get.connected.atoms","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.connection.matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Get connection matrix for a molecule. — get.connection.matrix","title":"Get connection matrix for a molecule. — get.connection.matrix","text":"connection matrix molecule \\(N\\) non-hydrogen atoms \\(N \\times N\\) matrix element [\\(\\),\\(j\\)] set  bond order atoms \\(\\) \\(j\\) connected bond, otherwise set 0.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.connection.matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get connection matrix for a molecule. — get.connection.matrix","text":"","code":"get.connection.matrix(mol)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.connection.matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get connection matrix for a molecule. — get.connection.matrix","text":"mol jobjRef object Java class IAtomContainer","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.connection.matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get connection matrix for a molecule. — get.connection.matrix","text":"\\(N \\times N\\) numeric matrix","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/get.connection.matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get connection matrix for a molecule. — get.connection.matrix","text":"Rajarshi Guha rajarshi.guha@gmail.com","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.connection.matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get connection matrix for a molecule. — get.connection.matrix","text":"","code":"m <- parse.smiles(\"CC=C\")[[1]] get.connection.matrix(m) #>      [,1] [,2] [,3] #> [1,]    0    1    0 #> [2,]    1    0    2 #> [3,]    0    2    0"},{"path":"https://cdk-r.github.io/cdkr/reference/get.depictor.html","id":null,"dir":"Reference","previous_headings":"","what":"get.depictor — get.depictor","title":"get.depictor — get.depictor","text":"return RcdkDepictor.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.depictor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get.depictor — get.depictor","text":"","code":"get.depictor(   width = 200,   height = 200,   zoom = 1.3,   style = \"cow\",   annotate = \"off\",   abbr = \"on\",   suppressh = TRUE,   showTitle = FALSE,   smaLimit = 100,   sma = NULL,   fillToFit = FALSE )"},{"path":"https://cdk-r.github.io/cdkr/reference/get.depictor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get.depictor — get.depictor","text":"width Default. 200 height Default. 200 zoom Default. 1.3 style Default. cow annotate Default. abbr Default. suppressh Default. TRUE showTitle Default. FALSE smaLimit Default. 100 sma Default. NULL fillToFit Defailt. FALSE","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.desc.categories.html","id":null,"dir":"Reference","previous_headings":"","what":"List available descriptor categories — get.desc.categories","title":"List available descriptor categories — get.desc.categories","text":"List available descriptor categories","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.desc.categories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List available descriptor categories — get.desc.categories","text":"","code":"get.desc.categories()"},{"path":"https://cdk-r.github.io/cdkr/reference/get.desc.categories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List available descriptor categories — get.desc.categories","text":"character vector listing available descriptor categories. can used get.desc.names","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/get.desc.categories.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"List available descriptor categories — get.desc.categories","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.desc.names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get descriptor class names — get.desc.names","title":"Get descriptor class names — get.desc.names","text":"Get descriptor class names","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.desc.names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get descriptor class names — get.desc.names","text":"","code":"get.desc.names(type = \"all\")"},{"path":"https://cdk-r.github.io/cdkr/reference/get.desc.names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get descriptor class names — get.desc.names","text":"type string indicating class descriptors return. Specifying `\"\"` return class names molecular descriptors. Options include * topological * geometrical * hybrid * constitutional * protein * electronic","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/get.desc.names.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get descriptor class names — get.desc.names","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.element.types.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain the type of stereo element support for atom. — get.element.types","title":"Obtain the type of stereo element support for atom. — get.element.types","text":"Supported elements types Bicoordinate central atom involved cumulated system (yet supported) Tricoordinate atom one end geometric (double-bond) stereo bond cumulated system Tetracoordinate tetrahedral atom (also square planar future) None atom (supported) stereo element type","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.element.types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain the type of stereo element support for atom. — get.element.types","text":"","code":"get.element.types(mol)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.element.types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain the type of stereo element support for atom. — get.element.types","text":"mol jObjRef representing IAtomContainer","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.element.types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain the type of stereo element support for atom. — get.element.types","text":"factor length equal length number atoms, indicating element type","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/get.element.types.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Obtain the type of stereo element support for atom. — get.element.types","text":"Rajarshi Guha rajarshi.guha@gmail.com","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.exact.mass.html","id":null,"dir":"Reference","previous_headings":"","what":"get.exact.mass — get.exact.mass","title":"get.exact.mass — get.exact.mass","text":"get.exact.mass","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.exact.mass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get.exact.mass — get.exact.mass","text":"","code":"get.exact.mass(mol)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.exact.mass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get.exact.mass — get.exact.mass","text":"mol molecule query. `jobjRef` representing `IAtomContainer`","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.exhaustive.fragments.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Bemis-Murcko Fragments — get.exhaustive.fragments","title":"Generate Bemis-Murcko Fragments — get.exhaustive.fragments","text":"Fragment input molecule using Bemis-Murcko scheme","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.exhaustive.fragments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Bemis-Murcko Fragments — get.exhaustive.fragments","text":"","code":"get.exhaustive.fragments(mols, min.frag.size = 6, as.smiles = TRUE)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.exhaustive.fragments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Bemis-Murcko Fragments — get.exhaustive.fragments","text":"mols list `jobjRef` objects Java class `IAtomContainer` min.frag.size smallest fragment consider (terms heavy atoms) .smiles `TRUE` return fragments SMILES strings. , fragments returned `jobjRef` objects","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.exhaustive.fragments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Bemis-Murcko Fragments — get.exhaustive.fragments","text":"returns list length equal number input molecules. element character vector SMILES strings list `jobjRef` objects.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.exhaustive.fragments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Bemis-Murcko Fragments — get.exhaustive.fragments","text":"variety methods fragmenting molecules available ranging exhaustive, rings specific methods Murcko frameworks. Fragmenting collection molecules can useful variety analyses. addition fragment based analysis can useful faster alternative traditional  clustering whole collection, especially large. Note exhaustive fragmentation large molecules (many single bonds) can become time consuming.","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/get.exhaustive.fragments.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate Bemis-Murcko Fragments — get.exhaustive.fragments","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.exhaustive.fragments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Bemis-Murcko Fragments — get.exhaustive.fragments","text":"","code":"mol <- parse.smiles('c1ccc(cc1)CN(c2cc(ccc2[N+](=O)[O-])c3c(nc(nc3CC)N)N)C')[[1]] mf1 <- get.murcko.fragments(mol, as.smiles=TRUE, single.framework=TRUE) mf1 <- get.murcko.fragments(mol, as.smiles=TRUE, single.framework=FALSE)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.fingerprint.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate molecular fingerprints — get.fingerprint","title":"Generate molecular fingerprints — get.fingerprint","text":"`get.fingerprint` returns `fingerprint` object representing molecular fingerprint input molecule.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.fingerprint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate molecular fingerprints — get.fingerprint","text":"","code":"get.fingerprint(   molecule,   type = \"standard\",   fp.mode = \"bit\",   depth = 6,   size = 1024,   substructure.pattern = character(),   circular.type = \"ECFP6\",   verbose = FALSE )"},{"path":"https://cdk-r.github.io/cdkr/reference/get.fingerprint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate molecular fingerprints — get.fingerprint","text":"molecule jobjRef object IAtomContaine type type fingerprint. Possible values : standard - Considers paths given length. default can changed. hashed fingerprints, default length 1024 extended - Similar standard type, takes rings atomic properties account account graph - Similar standard type simply considers connectivity hybridization - Similar standard type, consider hybridization state maccs - popular 166 bit MACCS keys described MDL estate - 79 bit fingerprints corresponding E-State atom types described Hall Kier pubchem - 881 bit fingerprints defined PubChem kr - 4860 bit fingerprint defined Klekota Roth shortestpath - fingerprint based shortest paths pairs atoms takes account ring systems, charges etc. signature - feature,count type fingerprint, similar nature circular fingerprints, based signature  descriptor circular - implementation ECFP6 (default) fingerprint. circular types can chosen modifying circular.type parameter. substructure - Fingerprint based list SMARTS pattern. default set functional groups tested. fp.mode style fingerprint. Specifying \"`bit`\" return binary fingerprint, \"`raw`\" returns original representation (usually sequence integers)  \"`count`\" returns fingerprint sequence counts. depth search depth. argument ignored `pubchem`, `maccs`, `kr` `estate` fingerprints size final length fingerprint.  argument ignored `pubchem`, `maccs`, `kr`, `signature`, `circular`  `estate` fingerprints substructure.pattern List characters containing SMARTS pattern match. empty list provided (default) functional groups substructures (default CDK) used. circular.type Name circular fingerprint type computed given string. Possible values : 'ECFP0', 'ECFP2', 'ECFP4', 'ECFP6' (default), 'FCFP0', 'FCFP2', 'FCFP4' 'FCFP6'. verbose Verbose output TRUE","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.fingerprint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate molecular fingerprints — get.fingerprint","text":"S4 object class fingerprint-class featvec-class,  can manipulated fingerprint package.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.fingerprint.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate molecular fingerprints — get.fingerprint","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.fingerprint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate molecular fingerprints — get.fingerprint","text":"","code":"## get some molecules sp <- get.smiles.parser() smiles <- c('CCC', 'CCN', 'CCN(C)(C)', 'c1ccccc1Cc1ccccc1','C1CCC1CC(CN(C)(C))CC(=O)CC') mols <- parse.smiles(smiles)  ## get a single fingerprint using the standard ## (hashed, path based) fingerprinter fp <- get.fingerprint(mols[[1]])  ## get MACCS keys for all the molecules fps <- lapply(mols, get.fingerprint, type='maccs')  ## get Signature fingerprint ## feature, count fingerprinter fps <- lapply(mols, get.fingerprint, type='signature', fp.mode='raw') ## get Substructure fingerprint for functional group fragments fps <- lapply(mols, get.fingerprint, type='substructure')  ## get Substructure count fingerprint for user defined fragments mol1 <- parse.smiles(\"c1ccccc1CCC\")[[1]] smarts <- c(\"c1ccccc1\", \"[CX4H3][#6]\", \"[CX2]#[CX2]\") fps <- get.fingerprint(mol1, type='substructure', fp.mode='count',     substructure.pattern=smarts)  ## get ECFP0 count fingerprints  mol2 <- parse.smiles(\"C1=CC=CC(=C1)CCCC2=CC=CC=C2\")[[1]] fps <- get.fingerprint(mol2, type='circular', fp.mode='count', circular.type='ECFP0')"},{"path":"https://cdk-r.github.io/cdkr/reference/get.formal.charge.html","id":null,"dir":"Reference","previous_headings":"","what":"get.formal.charge — get.formal.charge","title":"get.formal.charge — get.formal.charge","text":"Get formal charge atom.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.formal.charge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get.formal.charge — get.formal.charge","text":"","code":"get.formal.charge(atom)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.formal.charge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get.formal.charge — get.formal.charge","text":"atom atom query","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.formal.charge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get.formal.charge — get.formal.charge","text":"integer representing formal charge","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.formal.charge.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"get.formal.charge — get.formal.charge","text":"default formal charge 0 (.e., NULL never returned).","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/get.formal.charge.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"get.formal.charge — get.formal.charge","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.formula.html","id":null,"dir":"Reference","previous_headings":"","what":"get.formula — get.formula","title":"get.formula — get.formula","text":"obtain molecular formula formula string","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get.formula — get.formula","text":"","code":"get.formula(mf, charge = 0)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get.formula — get.formula","text":"mf Required. Molecular formula charge Optional. Default 0","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.hydrogen.count.html","id":null,"dir":"Reference","previous_headings":"","what":"get.hydrogen.count — get.hydrogen.count","title":"get.hydrogen.count — get.hydrogen.count","text":"Get implicit hydrogen count atom.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.hydrogen.count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get.hydrogen.count — get.hydrogen.count","text":"","code":"get.hydrogen.count(atom)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.hydrogen.count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get.hydrogen.count — get.hydrogen.count","text":"atom atom query","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.hydrogen.count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get.hydrogen.count — get.hydrogen.count","text":"integer representing hydrogen count","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.hydrogen.count.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"get.hydrogen.count — get.hydrogen.count","text":"method returns number implicit H's atom.  Depending molecule read may NULL integer greater equal 0","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.hydrogen.count.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"get.hydrogen.count — get.hydrogen.count","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.isotope.pattern.generator.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct an isotope pattern generator. — get.isotope.pattern.generator","title":"Construct an isotope pattern generator. — get.isotope.pattern.generator","text":"Constructs instance CDK IsotopePatternGenerator, optional minimum abundance specified. object can used generate combinatorial chemical isotopes given structure.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.isotope.pattern.generator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct an isotope pattern generator. — get.isotope.pattern.generator","text":"","code":"get.isotope.pattern.generator(minAbundance = NULL)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.isotope.pattern.generator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct an isotope pattern generator. — get.isotope.pattern.generator","text":"minAbundance minimum abundance","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.isotope.pattern.generator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct an isotope pattern generator. — get.isotope.pattern.generator","text":"jobjRef corresponding instance IsotopePatternGenerator","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.isotope.pattern.generator.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Construct an isotope pattern generator. — get.isotope.pattern.generator","text":"http://cdk.github.io/cdk/1.5/docs/api/org/openscience/cdk/formula/IsotopePatternGenerator.html","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.isotope.pattern.generator.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Construct an isotope pattern generator. — get.isotope.pattern.generator","text":"Miguel Rojas Cherto","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.isotope.pattern.similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct an isotope pattern similarity calculator. — get.isotope.pattern.similarity","title":"Construct an isotope pattern similarity calculator. — get.isotope.pattern.similarity","text":"method returns instance CDK IsotopePatternSimilarity class can used compute similarity scores pairs isotope abundance patterns.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.isotope.pattern.similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct an isotope pattern similarity calculator. — get.isotope.pattern.similarity","text":"","code":"get.isotope.pattern.similarity(tol = NULL)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.isotope.pattern.similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct an isotope pattern similarity calculator. — get.isotope.pattern.similarity","text":"tol tolerance","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.isotope.pattern.similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct an isotope pattern similarity calculator. — get.isotope.pattern.similarity","text":"jobjRef corresponding instance IsotopePatternSimilarity","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.isotope.pattern.similarity.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Construct an isotope pattern similarity calculator. — get.isotope.pattern.similarity","text":"http://cdk.github.io/cdk/1.5/docs/api/org/openscience/cdk/formula/IsotopePatternSimilarity.html","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/get.isotope.pattern.similarity.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Construct an isotope pattern similarity calculator. — get.isotope.pattern.similarity","text":"Miguel Rojas Cherto","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.isotopes.pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"get.isotopes.pattern — get.isotopes.pattern","title":"get.isotopes.pattern — get.isotopes.pattern","text":"Generate isotope pattern given formula class","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.isotopes.pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get.isotopes.pattern — get.isotopes.pattern","text":"","code":"get.isotopes.pattern(formula, minAbund = 0.1)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.isotopes.pattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get.isotopes.pattern — get.isotopes.pattern","text":"formula Required. CDK molecule formula minAbund Optional. Default 0.1","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.largest.component.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the largest component in a disconnected molecular graph. — get.largest.component","title":"Gets the largest component in a disconnected molecular graph. — get.largest.component","text":"molecule may represented  disconnected graph, read salt form. method return larges connected component single component (.e., molecular graph  complete fully connected), component returned.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.largest.component.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the largest component in a disconnected molecular graph. — get.largest.component","text":"","code":"get.largest.component(mol)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.largest.component.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the largest component in a disconnected molecular graph. — get.largest.component","text":"mol molecule query. `jobjRef` representing `IAtomContainer`","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.largest.component.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the largest component in a disconnected molecular graph. — get.largest.component","text":"largest component `IAtomContainer` object else input molecule ","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/get.largest.component.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gets the largest component in a disconnected molecular graph. — get.largest.component","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.largest.component.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the largest component in a disconnected molecular graph. — get.largest.component","text":"","code":"m <- parse.smiles(\"CC.CCCCCC.CCCC\")[[1]] largest <- get.largest.component(m) length(get.atoms(largest)) == 6 #> [1] TRUE"},{"path":"https://cdk-r.github.io/cdkr/reference/get.mcs.html","id":null,"dir":"Reference","previous_headings":"","what":"get.mcs — get.mcs","title":"get.mcs — get.mcs","text":"get.mcs","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.mcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get.mcs — get.mcs","text":"","code":"get.mcs(mol1, mol2, as.molecule = TRUE)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.mcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get.mcs — get.mcs","text":"mol1 Required. First molecule compare. `jobjRef` representing `IAtomContainer` mol2 Required. Second molecule compare. `jobjRef` representing `IAtomContainer` .molecule Optional. Default TRUE.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.mol2formula.html","id":null,"dir":"Reference","previous_headings":"","what":"get.mol2formula — get.mol2formula","title":"get.mol2formula — get.mol2formula","text":"get.mol2formula","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.mol2formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get.mol2formula — get.mol2formula","text":"","code":"get.mol2formula(molecule, charge = 0)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.mol2formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get.mol2formula — get.mol2formula","text":"molecule molecule query. `jobjRef` representing `IAtomContainer` charge Optional. Default 0","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.murcko.fragments.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Bemis-Murcko Fragments — get.murcko.fragments","title":"Generate Bemis-Murcko Fragments — get.murcko.fragments","text":"Fragment input molecule using Bemis-Murcko scheme","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.murcko.fragments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Bemis-Murcko Fragments — get.murcko.fragments","text":"","code":"get.murcko.fragments(   mols,   min.frag.size = 6,   as.smiles = TRUE,   single.framework = FALSE )"},{"path":"https://cdk-r.github.io/cdkr/reference/get.murcko.fragments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Bemis-Murcko Fragments — get.murcko.fragments","text":"mols list `jobjRef` objects Java class `IAtomContainer` min.frag.size smallest fragment consider (terms heavy atoms) .smiles `TRUE` return fragments SMILES strings. , fragments returned `jobjRef` objects single.framework `TRUE`, single framework (.e., framework consisting union ring systems linkers) returned molecule. Otherwise, combinations ring systems linkers returned","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.murcko.fragments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Bemis-Murcko Fragments — get.murcko.fragments","text":"Returns list element list two elements: `rings` `frameworks`. elements either character vector SMILES strings list `IAtomContainer` objects.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.murcko.fragments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Bemis-Murcko Fragments — get.murcko.fragments","text":"variety methods fragmenting molecules available ranging exhaustive, rings specific methods Murcko frameworks. Fragmenting collection molecules can useful variety analyses. addition fragment based analysis can useful faster alternative traditional  clustering whole collection, especially large. Note exhaustive fragmentation large molecules (many single bonds) can become time consuming.","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/get.murcko.fragments.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate Bemis-Murcko Fragments — get.murcko.fragments","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.murcko.fragments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Bemis-Murcko Fragments — get.murcko.fragments","text":"","code":"mol <- parse.smiles('c1ccc(cc1)CN(c2cc(ccc2[N+](=O)[O-])c3c(nc(nc3CC)N)N)C')[[1]] mf1 <- get.murcko.fragments(mol, as.smiles=TRUE, single.framework=TRUE) mf1 <- get.murcko.fragments(mol, as.smiles=TRUE, single.framework=FALSE)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.natural.mass.html","id":null,"dir":"Reference","previous_headings":"","what":"get.natural.mass — get.natural.mass","title":"get.natural.mass — get.natural.mass","text":"get.natural.mass","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.natural.mass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get.natural.mass — get.natural.mass","text":"","code":"get.natural.mass(mol)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.natural.mass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get.natural.mass — get.natural.mass","text":"mol molecule query. `jobjRef` representing `IAtomContainer`","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.point2d.html","id":null,"dir":"Reference","previous_headings":"","what":"get.point2d — get.point2d","title":"get.point2d — get.point2d","text":"Get 2D coordinates atom.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.point2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get.point2d — get.point2d","text":"","code":"get.point2d(atom)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.point2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get.point2d — get.point2d","text":"atom atom query","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.point2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get.point2d — get.point2d","text":"2-element numeric vector representing X & Y coordinates.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.point2d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"get.point2d — get.point2d","text":"case, coordinates unavailable (e.g., molecule read  SMILES file) generated yet, `NA`'s returned  X & Y coordinates.","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/get.point2d.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"get.point2d — get.point2d","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.point2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get.point2d — get.point2d","text":"","code":"if (FALSE) { atoms <- get.atoms(mol) coords <- do.call('rbind', lapply(apply, get.point2d)) }"},{"path":"https://cdk-r.github.io/cdkr/reference/get.point3d.html","id":null,"dir":"Reference","previous_headings":"","what":"get.point3d — get.point3d","title":"get.point3d — get.point3d","text":"Get 3D coordinates atom.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.point3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get.point3d — get.point3d","text":"","code":"get.point3d(atom)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.point3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get.point3d — get.point3d","text":"atom atom query","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.point3d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get.point3d — get.point3d","text":"3-element numeric vector representing X, Y Z coordinates.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.point3d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"get.point3d — get.point3d","text":"case, coordinates unavailable (e.g., molecule read  SMILES file) generated yet, `NA`'s returned  X, Y Z coordinates.","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/get.point3d.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"get.point3d — get.point3d","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.point3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get.point3d — get.point3d","text":"","code":"if (FALSE) { atoms <- get.atoms(mol) coords <- do.call('rbind', lapply(apply, get.point3d)) }"},{"path":"https://cdk-r.github.io/cdkr/reference/get.properties.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all properties associated with a molecule. — get.properties","title":"Get all properties associated with a molecule. — get.properties","text":"context property value associated key stored molecule. method returns list properties  molecule. names list set property names.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.properties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all properties associated with a molecule. — get.properties","text":"","code":"get.properties(molecule)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.properties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all properties associated with a molecule. — get.properties","text":"molecule molecule query. `jobjRef` representing `IAtomContainer`","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.properties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all properties associated with a molecule. — get.properties","text":"named `list` property values. Element names keys  property. properties defined, empty list.","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/get.properties.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get all properties associated with a molecule. — get.properties","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.properties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all properties associated with a molecule. — get.properties","text":"","code":"mol <- parse.smiles(\"CC1CC(C=O)CCC1\")[[1]] set.property(mol, 'prop1', 23.45) set.property(mol, 'prop2', 'inactive') get.properties(mol) #> $`cdk:Title` #> [1] NA #>  #> $prop1 #> [1] 23.45 #>  #> $prop2 #> [1] \"inactive\" #>"},{"path":"https://cdk-r.github.io/cdkr/reference/get.property.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a property value of the molecule. — get.property","title":"Get a property value of the molecule. — get.property","text":"function retrieves value keyed property previously set molecule. Properties enable us  associate arbitrary pieces data molecule. data can text, numeric Java object (represented `jobjRef`).","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.property.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a property value of the molecule. — get.property","text":"","code":"get.property(molecule, key)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.property.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a property value of the molecule. — get.property","text":"molecule molecule query. `jobjRef` representing `IAtomContainer` key property key character string","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.property.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a property value of the molecule. — get.property","text":"value property. property specified key, `NA` returned","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/get.property.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get a property value of the molecule. — get.property","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.property.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a property value of the molecule. — get.property","text":"","code":"mol <- parse.smiles(\"CC1CC(C=O)CCC1\")[[1]] set.property(mol, 'prop1', 23.45) set.property(mol, 'prop2', 'inactive') get.property(mol, 'prop1') #> [1] 23.45"},{"path":"https://cdk-r.github.io/cdkr/reference/get.smiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a SMILES representation of a molecule. — get.smiles","title":"Generate a SMILES representation of a molecule. — get.smiles","text":"function generate SMILES representation `IAtomContainer` object. default parameters CDK SMILES generator used. can mean large ring systems method may fail. See CDK Javadocs information","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.smiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a SMILES representation of a molecule. — get.smiles","text":"","code":"get.smiles(molecule, flavor = smiles.flavors(c(\"Generic\")), smigen = NULL)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.smiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a SMILES representation of a molecule. — get.smiles","text":"molecule molecule query. `jobjRef` representing `IAtomContainer` flavor type SMILES generate. See smiles.flavors. Default `Generic` SMILES smigen pre-existing SMILES generator object. default, new one created specified flavor","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.smiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a SMILES representation of a molecule. — get.smiles","text":"character string containing generated SMILES","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.smiles.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate a SMILES representation of a molecule. — get.smiles","text":"SmilesGenerator","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/get.smiles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate a SMILES representation of a molecule. — get.smiles","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.smiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a SMILES representation of a molecule. — get.smiles","text":"","code":"m <- parse.smiles('C1C=CCC1N(C)c1ccccc1')[[1]] get.smiles(m) #> [1] \"C1C=CCC1N(C)C2=CC=CC=C2\" get.smiles(m, smiles.flavors(c('Generic','UseAromaticSymbols'))) #> [1] \"C1C=CCC1N(C)c2ccccc2\""},{"path":"https://cdk-r.github.io/cdkr/reference/get.smiles.parser.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a SMILES parser object. — get.smiles.parser","title":"Get a SMILES parser object. — get.smiles.parser","text":"function returns reference SMILES parser object. parsing multiple SMILES strings using multiple calls parse.smiles, preferable create parser supply parse.smiles rather forcing function instantiate new parser call","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.smiles.parser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a SMILES parser object. — get.smiles.parser","text":"","code":"get.smiles.parser()"},{"path":"https://cdk-r.github.io/cdkr/reference/get.smiles.parser.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a SMILES parser object. — get.smiles.parser","text":"`jobjRef` object corresponding CDK  SmilesParser class","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/get.smiles.parser.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get a SMILES parser object. — get.smiles.parser","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.stereo.types.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain the stereocenter type for atom. — get.stereo.types","title":"Obtain the stereocenter type for atom. — get.stereo.types","text":"Supported stereo center types True atom constitutionally different neighbors Para atom resembles stereo centre constitutionally equivalent neighbors (e.g. inositol, decalin). stereocenter depends configuration one stereocenters. Potential atom can supported stereo chemistry shown ot true para center Non atom stereocenter (e.g. methane)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.stereo.types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain the stereocenter type for atom. — get.stereo.types","text":"","code":"get.stereo.types(mol)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.stereo.types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain the stereocenter type for atom. — get.stereo.types","text":"mol jObjRef representing IAtomContainer","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.stereo.types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain the stereocenter type for atom. — get.stereo.types","text":"factor length equal length number atoms indicating stereocenter type.","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/get.stereo.types.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Obtain the stereocenter type for atom. — get.stereo.types","text":"Rajarshi Guha rajarshi.guha@gmail.com","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.stereocenters.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify which atoms are stereocenters. — get.stereocenters","title":"Identify which atoms are stereocenters. — get.stereocenters","text":"method identifies stereocenters based connectivity.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.stereocenters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify which atoms are stereocenters. — get.stereocenters","text":"","code":"get.stereocenters(mol)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.stereocenters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify which atoms are stereocenters. — get.stereocenters","text":"mol jObjRef representing IAtomContainer","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.stereocenters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify which atoms are stereocenters. — get.stereocenters","text":"logical vector length equal length number atoms. 'th element TRUE 'th element identified stereocenter","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/get.stereocenters.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Identify which atoms are stereocenters. — get.stereocenters","text":"Rajarshi Guha rajarshi.guha@gmail.com","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.symbol.html","id":null,"dir":"Reference","previous_headings":"","what":"get.symbol — get.symbol","title":"get.symbol — get.symbol","text":"Get atomic symbol atom.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.symbol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get.symbol — get.symbol","text":"","code":"get.symbol(atom)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.symbol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get.symbol — get.symbol","text":"atom atom query","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.symbol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get.symbol — get.symbol","text":"character representing atomic symbol","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.symbol.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"get.symbol — get.symbol","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.title.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the title of the molecule. — get.title","title":"Get the title of the molecule. — get.title","text":"molecules may title (parsing SMILES title).","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the title of the molecule. — get.title","text":"","code":"get.title(mol)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.title.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the title of the molecule. — get.title","text":"mol molecule query. `jobjRef` representing `IAtomContainer`","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.title.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the title of the molecule. — get.title","text":"character string title, `NA` title specified","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/get.title.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the title of the molecule. — get.title","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.total.charge.html","id":null,"dir":"Reference","previous_headings":"","what":"get.total.charge — get.total.charge","title":"get.total.charge — get.total.charge","text":"get.total.charge","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.total.charge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get.total.charge — get.total.charge","text":"","code":"get.total.charge(mol)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.total.charge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get.total.charge — get.total.charge","text":"mol molecule query. `jobjRef` representing `IAtomContainer`","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.total.formal.charge.html","id":null,"dir":"Reference","previous_headings":"","what":"get.total.formal.charge — get.total.formal.charge","title":"get.total.formal.charge — get.total.formal.charge","text":"get.total.formal.charge","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.total.formal.charge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get.total.formal.charge — get.total.formal.charge","text":"","code":"get.total.formal.charge(mol)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.total.formal.charge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get.total.formal.charge — get.total.formal.charge","text":"mol molecule query. `jobjRef` representing `IAtomContainer`","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.total.hydrogen.count.html","id":null,"dir":"Reference","previous_headings":"","what":"Get total number of implicit hydrogens in the molecule. — get.total.hydrogen.count","title":"Get total number of implicit hydrogens in the molecule. — get.total.hydrogen.count","text":"Counts number hydrogens provided molecule. method  sum implicit hydrogens atom important ensure  molecule already configured (thus atom  implicit hydrogen count).","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.total.hydrogen.count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get total number of implicit hydrogens in the molecule. — get.total.hydrogen.count","text":"","code":"get.total.hydrogen.count(mol)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.total.hydrogen.count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get total number of implicit hydrogens in the molecule. — get.total.hydrogen.count","text":"mol molecule query. `jobjRef` representing `IAtomContainer`","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.total.hydrogen.count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get total number of implicit hydrogens in the molecule. — get.total.hydrogen.count","text":"integer representing total number implicit hydrogens","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/get.total.hydrogen.count.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get total number of implicit hydrogens in the molecule. — get.total.hydrogen.count","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.tpsa.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute TPSA for a molecule — get.tpsa","title":"Compute TPSA for a molecule — get.tpsa","text":"Compute TPSA molecule","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.tpsa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute TPSA for a molecule — get.tpsa","text":"","code":"get.tpsa(molecule)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.tpsa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute TPSA for a molecule — get.tpsa","text":"molecule molecule object","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.tpsa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute TPSA for a molecule — get.tpsa","text":"double value representing TPSA value","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.tpsa.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute TPSA for a molecule — get.tpsa","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.volume.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute volume of a molecule — get.volume","title":"Compute volume of a molecule — get.volume","text":"method require 3D coordinates. result approximation","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.volume.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute volume of a molecule — get.volume","text":"","code":"get.volume(molecule)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.volume.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute volume of a molecule — get.volume","text":"molecule molecule object","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.volume.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute volume of a molecule — get.volume","text":"double value representing volume","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.volume.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute volume of a molecule — get.volume","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.xlogp.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute XLogP for a molecule — get.xlogp","title":"Compute XLogP for a molecule — get.xlogp","text":"Compute XLogP molecule","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.xlogp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute XLogP for a molecule — get.xlogp","text":"","code":"get.xlogp(molecule)"},{"path":"https://cdk-r.github.io/cdkr/reference/get.xlogp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute XLogP for a molecule — get.xlogp","text":"molecule molecule object","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.xlogp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute XLogP for a molecule — get.xlogp","text":"double value representing XLogP value","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/get.xlogp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute XLogP for a molecule — get.xlogp","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/iload.molecules.html","id":null,"dir":"Reference","previous_headings":"","what":"Load molecules using an iterator. — iload.molecules","title":"Load molecules using an iterator. — iload.molecules","text":"CDK can read variety molecular structure formats. file formats support multiple molecules single file. read using load.molecules, read memory. large structure files, can lead memory errors. Instead  recommended use iterating version loader single molecule read time.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/iload.molecules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load molecules using an iterator. — iload.molecules","text":"","code":"iload.molecules(   molfile,   type = \"smi\",   aromaticity = TRUE,   typing = TRUE,   isotopes = TRUE,   skip = TRUE )"},{"path":"https://cdk-r.github.io/cdkr/reference/iload.molecules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load molecules using an iterator. — iload.molecules","text":"molfile string containing filename load. Must local file type Indicates whether input file SMILES SDF. Valid values `\"smi\"` `\"sdf\"` aromaticity `TRUE` aromaticity detection performed loaded molecules. fails given molecule, molecule set `NA` return list typing `TRUE` atom typing performed loaded molecules. assigned types CDK internal types. fails given molecule, molecule  set `NA` return list isotopes `TRUE` atoms configured isotopic masses skip `TRUE`, reader continue reading even  faced invalid molecule. `FALSE`, reader stop  fist invalid molecule","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/iload.molecules.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load molecules using an iterator. — iload.molecules","text":"Note iterating loader supports SDF SMILES file formats.","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/iload.molecules.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Load molecules using an iterator. — iload.molecules","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/iload.molecules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load molecules using an iterator. — iload.molecules","text":"","code":"if (FALSE) { moliter <- iload.molecules(\"big.sdf\", type=\"sdf\") while(hasNext(moliter)) { mol <- nextElem(moliter)   print(get.property(mol, \"cdk:Title\")) } }"},{"path":"https://cdk-r.github.io/cdkr/reference/is.aliphatic.html","id":null,"dir":"Reference","previous_headings":"","what":"is.aliphatic — is.aliphatic","title":"is.aliphatic — is.aliphatic","text":"Tests whether atom aliphatic.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/is.aliphatic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"is.aliphatic — is.aliphatic","text":"","code":"is.aliphatic(atom)"},{"path":"https://cdk-r.github.io/cdkr/reference/is.aliphatic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"is.aliphatic — is.aliphatic","text":"atom atom test","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/is.aliphatic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"is.aliphatic — is.aliphatic","text":"`TRUE` atom aliphatic, `FALSE` otherwise","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/is.aliphatic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"is.aliphatic — is.aliphatic","text":"assumes molecule containing atom  appropriately configured.","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/is.aliphatic.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"is.aliphatic — is.aliphatic","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/is.aromatic.html","id":null,"dir":"Reference","previous_headings":"","what":"is.aromatic — is.aromatic","title":"is.aromatic — is.aromatic","text":"Tests whether atom aromatic.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/is.aromatic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"is.aromatic — is.aromatic","text":"","code":"is.aromatic(atom)"},{"path":"https://cdk-r.github.io/cdkr/reference/is.aromatic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"is.aromatic — is.aromatic","text":"atom atom test","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/is.aromatic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"is.aromatic — is.aromatic","text":"`TRUE` atom aromatic, `FALSE` otherwise","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/is.aromatic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"is.aromatic — is.aromatic","text":"assumes molecule containing atom  appropriately configured.","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/is.aromatic.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"is.aromatic — is.aromatic","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/is.connected.html","id":null,"dir":"Reference","previous_headings":"","what":"Tests whether the molecule is fully connected. — is.connected","title":"Tests whether the molecule is fully connected. — is.connected","text":"single molecule represented  complete graph.  cases, molecules salt form, certain  operations bond splits, molecular graph may contained  disconnected components. method can used tested whether molecule complete (.e. fully connected).","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/is.connected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tests whether the molecule is fully connected. — is.connected","text":"","code":"is.connected(mol)"},{"path":"https://cdk-r.github.io/cdkr/reference/is.connected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tests whether the molecule is fully connected. — is.connected","text":"mol molecule query. `jobjRef` representing `IAtomContainer`","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/is.connected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tests whether the molecule is fully connected. — is.connected","text":"`TRUE` molecule complete, `FALSE` otherwise","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/is.connected.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Tests whether the molecule is fully connected. — is.connected","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/is.connected.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tests whether the molecule is fully connected. — is.connected","text":"","code":"m <- parse.smiles(\"CC.CCCCCC.CCCC\")[[1]] is.connected(m) #> [1] FALSE"},{"path":"https://cdk-r.github.io/cdkr/reference/is.in.ring.html","id":null,"dir":"Reference","previous_headings":"","what":"is.in.ring — is.in.ring","title":"is.in.ring — is.in.ring","text":"Tests whether atom ring.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/is.in.ring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"is.in.ring — is.in.ring","text":"","code":"is.in.ring(atom)"},{"path":"https://cdk-r.github.io/cdkr/reference/is.in.ring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"is.in.ring — is.in.ring","text":"atom atom test","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/is.in.ring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"is.in.ring — is.in.ring","text":"`TRUE` atom ring, `FALSE` otherwise","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/is.in.ring.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"is.in.ring — is.in.ring","text":"assumes molecule containing atom  appropriately configured.","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/is.in.ring.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"is.in.ring — is.in.ring","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/is.neutral.html","id":null,"dir":"Reference","previous_headings":"","what":"Tests whether the molecule is neutral. — is.neutral","title":"Tests whether the molecule is neutral. — is.neutral","text":"test checks whether atoms molecule formal charge 0.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/is.neutral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tests whether the molecule is neutral. — is.neutral","text":"","code":"is.neutral(mol)"},{"path":"https://cdk-r.github.io/cdkr/reference/is.neutral.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tests whether the molecule is neutral. — is.neutral","text":"mol molecule query. `jobjRef` representing `IAtomContainer`","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/is.neutral.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tests whether the molecule is neutral. — is.neutral","text":"`TRUE` molecule neutral, `FALSE` otherwise","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/is.neutral.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Tests whether the molecule is neutral. — is.neutral","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/isvalid.formula.html","id":null,"dir":"Reference","previous_headings":"","what":"isvalid.formula — isvalid.formula","title":"isvalid.formula — isvalid.formula","text":"Validate cdkFormula.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/isvalid.formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"isvalid.formula — isvalid.formula","text":"","code":"isvalid.formula(formula, rule = c(\"nitrogen\", \"RDBE\"))"},{"path":"https://cdk-r.github.io/cdkr/reference/isvalid.formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"isvalid.formula — isvalid.formula","text":"formula Required. CDK Formula rule Optional. Default rule=c(\"nitrogen\",\"RDBE\")","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/load.molecules.html","id":null,"dir":"Reference","previous_headings":"","what":"Load molecular structures from disk or URL — load.molecules","title":"Load molecular structures from disk or URL — load.molecules","text":"CDK can read variety molecular structure formats. function encapsulates calls CDK API load structure given filename URL structure file.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/load.molecules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load molecular structures from disk or URL — load.molecules","text":"","code":"load.molecules(   molfiles = NA,   aromaticity = TRUE,   typing = TRUE,   isotopes = TRUE,   verbose = FALSE )"},{"path":"https://cdk-r.github.io/cdkr/reference/load.molecules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load molecular structures from disk or URL — load.molecules","text":"molfiles `character` vector filenames. Note full path files provided. URL's can also used paths. case, URL start \"http://\" aromaticity `TRUE` aromaticity detection performed loaded molecules. fails given molecule, molecule set `NA` return list typing `TRUE` atom typing performed loaded molecules. assigned types CDK internal types. fails given molecule, molecule  set `NA` return list isotopes `TRUE` atoms configured isotopic masses verbose `TRUE`, output (file download progress) bountiful","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/load.molecules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load molecular structures from disk or URL — load.molecules","text":"`list` CDK `IAtomContainer` objects, represented `jobjRef` objects  R, can used `rcdk` functions","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/load.molecules.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load molecular structures from disk or URL — load.molecules","text":"Note method load molecules memory. files containing tens thousands molecules may lead memory errors.  situations consider using iterating file readers. Note molecules read formats rules handling implicit hydrogens (MDL MOL), molecule implicit explicit hydrogens. add explicit hydrogens, make sure molecule typed (`TRUE` default function) call  convert.implicit..explicit. hand format  SMILES, implicit explicit hydrogens present.","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/load.molecules.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Load molecular structures from disk or URL — load.molecules","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/load.molecules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load molecular structures from disk or URL — load.molecules","text":"","code":"if (FALSE) { sdffile <- system.file(\"molfiles/dhfr00008.sdf\", package=\"rcdk\") mols <- load.molecules(c('mol1.sdf', 'mol2.smi', sdfile)) }"},{"path":"https://cdk-r.github.io/cdkr/reference/matches.html","id":null,"dir":"Reference","previous_headings":"","what":"matches — matches","title":"matches — matches","text":"matches","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/matches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"matches — matches","text":"","code":"matches(query, target, return.matches = FALSE)"},{"path":"https://cdk-r.github.io/cdkr/reference/matches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"matches — matches","text":"query Required. SMARTSQuery target Required. molecule query. `jobjRef` representing `IAtomContainer` return.matches Optional. Default FALSE","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/parse.smiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse SMILES strings into molecule objects. — parse.smiles","title":"Parse SMILES strings into molecule objects. — parse.smiles","text":"function parses vector SMILES strings generate list `IAtomContainer` objects. Note resultant molecule 2D 3D coordinates. Note molecules obtained method aromaticity perception (unless aromatic symbols encountered,  case relevant atoms automatically set aromatic), atom typing  isotopic configuration done . contrast  load.molecules method. Thus, perform steps manually molecules.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/parse.smiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse SMILES strings into molecule objects. — parse.smiles","text":"","code":"parse.smiles(smiles, kekulise = TRUE, omit.nulls = FALSE, smiles.parser = NULL)"},{"path":"https://cdk-r.github.io/cdkr/reference/parse.smiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse SMILES strings into molecule objects. — parse.smiles","text":"smiles single SMILES string vector SMILES strings kekulise set `FALSE` disables electron checking allows parsing incorrect SMILES. SMILES parse default, try setting `FALSE` - though resultant molecule may consistent bonding. example, `c4ccc2c(cc1=Nc3ncccc3(Cn12))c4` parsed default missing nitrogen. argument set `FALSE` parse successfully, hack handle incorrect SMILES omit.nulls set `TRUE`, omits SMILES parsed `NULL` smiles.parser SMILES parser object obtained get.smiles.parser","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/parse.smiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse SMILES strings into molecule objects. — parse.smiles","text":"`list` `jobjRef`s corresponding CDK `IAtomContainer`  objects. SMILES string parsed `omit.nulls=TRUE`  omited output list.","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/parse.smiles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parse SMILES strings into molecule objects. — parse.smiles","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/rcdk-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions in the rcdk package. — rcdk-deprecated","title":"Deprecated functions in the rcdk package. — rcdk-deprecated","text":"functions provided compatibility older version phyloseq package.  may eventually completely removed.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/rcdk-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions in the rcdk package. — rcdk-deprecated","text":"","code":"deprecated_rcdk_function(x, value, ...)"},{"path":"https://cdk-r.github.io/cdkr/reference/rcdk-deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated functions in the rcdk package. — rcdk-deprecated","text":"x assignment operators, object undergo replacement (object inside parenthesis). value assignment operators, value replace  (right side assignment). ... functions assignment operators,  parameters passed modern version function (see table).","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/remove.hydrogens.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove explicit hydrogens. — remove.hydrogens","title":"Remove explicit hydrogens. — remove.hydrogens","text":"Create copy original structure explicit hydrogens removed.  Stereochemistry updated bonds depiction may need  recalculated. can also useful descriptor calculations.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/remove.hydrogens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove explicit hydrogens. — remove.hydrogens","text":"","code":"remove.hydrogens(mol)"},{"path":"https://cdk-r.github.io/cdkr/reference/remove.hydrogens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove explicit hydrogens. — remove.hydrogens","text":"mol molecule query. `jobjRef` representing `IAtomContainer`","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/remove.hydrogens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove explicit hydrogens. — remove.hydrogens","text":"copy original molecule, explicit hydrogens removed","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/remove.hydrogens.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove explicit hydrogens. — remove.hydrogens","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/remove.property.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a property associated with a molecule. — remove.property","title":"Remove a property associated with a molecule. — remove.property","text":"context property value associated key stored molecule. methd remove property defined key. key, warning raised.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/remove.property.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a property associated with a molecule. — remove.property","text":"","code":"remove.property(molecule, key)"},{"path":"https://cdk-r.github.io/cdkr/reference/remove.property.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a property associated with a molecule. — remove.property","text":"molecule molecule query. `jobjRef` representing `IAtomContainer` key property key character string","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/remove.property.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove a property associated with a molecule. — remove.property","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/remove.property.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove a property associated with a molecule. — remove.property","text":"","code":"mol <- parse.smiles(\"CC1CC(C=O)CCC1\")[[1]] set.property(mol, 'prop1', 23.45) set.property(mol, 'prop2', 'inactive') get.properties(mol) #> $`cdk:Title` #> [1] NA #>  #> $prop1 #> [1] 23.45 #>  #> $prop2 #> [1] \"inactive\" #>  remove.property(mol, 'prop2') get.properties(mol) #> $`cdk:Title` #> [1] NA #>  #> $prop1 #> [1] 23.45 #>"},{"path":"https://cdk-r.github.io/cdkr/reference/set.atom.types.html","id":null,"dir":"Reference","previous_headings":"","what":"set.atom.types — set.atom.types","title":"set.atom.types — set.atom.types","text":"Set CDK atom types atoms molecule.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/set.atom.types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"set.atom.types — set.atom.types","text":"","code":"set.atom.types(mol)"},{"path":"https://cdk-r.github.io/cdkr/reference/set.atom.types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"set.atom.types — set.atom.types","text":"mol molecule whose atoms typed","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/set.atom.types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"set.atom.types — set.atom.types","text":"Nothing returned, molecule modified place","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/set.atom.types.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"set.atom.types — set.atom.types","text":"Calling method overwrite pre-existing type information.  Currently way choose atom typing schemes","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/set.atom.types.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"set.atom.types — set.atom.types","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/set.charge.formula.html","id":null,"dir":"Reference","previous_headings":"","what":"set.charge.formula — set.charge.formula","title":"set.charge.formula — set.charge.formula","text":"Set charge cdkFormula function.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/set.charge.formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"set.charge.formula — set.charge.formula","text":"","code":"set.charge.formula(formula, charge = -1)"},{"path":"https://cdk-r.github.io/cdkr/reference/set.charge.formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"set.charge.formula — set.charge.formula","text":"formula Required. Molecular formula charge Optional. Default -1","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/set.property.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a property value of the molecule. — set.property","title":"Set a property value of the molecule. — set.property","text":"function sets value keyed property molecule.  Properties enable us associate arbitrary pieces data  molecule. data can text, numeric Java object  (represented `jobjRef`).","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/set.property.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a property value of the molecule. — set.property","text":"","code":"set.property(molecule, key, value)"},{"path":"https://cdk-r.github.io/cdkr/reference/set.property.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a property value of the molecule. — set.property","text":"molecule molecule query. `jobjRef` representing `IAtomContainer` key property key character string value value property. can character, numeric  `jobjRef` R object","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/set.property.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set a property value of the molecule. — set.property","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/set.property.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set a property value of the molecule. — set.property","text":"","code":"mol <- parse.smiles(\"CC1CC(C=O)CCC1\")[[1]] set.property(mol, 'prop1', 23.45) set.property(mol, 'prop2', 'inactive') get.property(mol, 'prop1') #> [1] 23.45"},{"path":"https://cdk-r.github.io/cdkr/reference/set.title.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the title of the molecule. — set.title","title":"Set the title of the molecule. — set.title","text":"Set title molecule.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/set.title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the title of the molecule. — set.title","text":"","code":"set.title(mol, title = \"\")"},{"path":"https://cdk-r.github.io/cdkr/reference/set.title.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the title of the molecule. — set.title","text":"mol molecule query. `jobjRef` representing `IAtomContainer` title title molecule character string. overwrite pre-existing title. default value empty string.","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/set.title.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the title of the molecule. — set.title","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/smiles.flavors.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate flag for customizing SMILES generation. — smiles.flavors","title":"Generate flag for customizing SMILES generation. — smiles.flavors","text":"CDK supports variety customizations SMILES generation including use lower case symbols aromatic compounds use ChemAxon CxSmiles format. 'flavor' represented integer multiple customizations bitwise 'ed. method accepts names one customizations returns bitwise . See CDK documentation list flavors mean.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/smiles.flavors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate flag for customizing SMILES generation. — smiles.flavors","text":"","code":"smiles.flavors(flavors = c(\"Generic\"))"},{"path":"https://cdk-r.github.io/cdkr/reference/smiles.flavors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate flag for customizing SMILES generation. — smiles.flavors","text":"flavors character vector flavors. default Generic (output non-canonical SMILES without stereochemistry, atomic masses). Possible values Absolute AtomAtomMap AtomicMass AtomicMassStrict Canonical Cx2dCoordinates Cx3dCoordinates CxAtomLabel CxAtomValue CxCoordinates CxFragmentGroup CxMulticenter CxPolymer CxRadical CxSmiles CxSmilesWithCoords Default Generic InChILabelling Isomeric Stereo StereoCisTrans StereoExTetrahedral StereoTetrahedral Unique UniversalSmiles UseAromaticSymbols","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/smiles.flavors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate flag for customizing SMILES generation. — smiles.flavors","text":"numeric representing bitwise ``` specified flavors","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/smiles.flavors.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate flag for customizing SMILES generation. — smiles.flavors","text":"CDK documentation","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/smiles.flavors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate flag for customizing SMILES generation. — smiles.flavors","text":"Rajarshi Guha rajarshi.guha@gmail.com","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/smiles.flavors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate flag for customizing SMILES generation. — smiles.flavors","text":"","code":"m <- parse.smiles('C1C=CCC1N(C)c1ccccc1')[[1]] get.smiles(m) #> [1] \"C1C=CCC1N(C)C2=CC=CC=C2\" get.smiles(m, smiles.flavors(c('Generic','UseAromaticSymbols'))) #> [1] \"C1C=CCC1N(C)c2ccccc2\"  m <- parse.smiles(\"OS(=O)(=O)c1ccc(cc1)C(CC)CC |Sg:n:13:m:ht,Sg:n:11:n:ht|\")[[1]] get.smiles(m,flavor = smiles.flavors(c(\"CxSmiles\"))) #> [1] \"OS(=O)(=O)C1=CC=C(C=C1)C(CC)CC |Sg:n:11:n:ht,Sg:n:13:m:ht|\" get.smiles(m,flavor = smiles.flavors(c(\"CxSmiles\",\"UseAromaticSymbols\"))) #> [1] \"OS(=O)(=O)c1ccc(cc1)C(CC)CC |Sg:n:11:n:ht,Sg:n:13:m:ht|\""},{"path":"https://cdk-r.github.io/cdkr/reference/view.image.2d.html","id":null,"dir":"Reference","previous_headings":"","what":"view.image.2d — view.image.2d","title":"view.image.2d — view.image.2d","text":"view.image.2d","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/view.image.2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"view.image.2d — view.image.2d","text":"","code":"view.image.2d(molecule, depictor = NULL)"},{"path":"https://cdk-r.github.io/cdkr/reference/view.image.2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"view.image.2d — view.image.2d","text":"molecule molecule display `jobjRef` representing `IAtomContainer` depictor Default NULL","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/view.molecule.2d.html","id":null,"dir":"Reference","previous_headings":"","what":"view.molecule.2d — view.molecule.2d","title":"view.molecule.2d — view.molecule.2d","text":"Create 2D depiction molecule. one molecules supplied, return grid woth ncol columns,.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/view.molecule.2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"view.molecule.2d — view.molecule.2d","text":"","code":"view.molecule.2d(   molecule,   ncol = 4,   width = 200,   height = 200,   depictor = NULL )"},{"path":"https://cdk-r.github.io/cdkr/reference/view.molecule.2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"view.molecule.2d — view.molecule.2d","text":"molecule molecule query. `jobjRef` representing `IAtomContainer` ncol Default 4 width Default 200 height Default 200 depictor Default NULL","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/view.table.html","id":null,"dir":"Reference","previous_headings":"","what":"view.table — view.table","title":"view.table — view.table","text":"Create tabular view set molecules (2D) associated data columns","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/view.table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"view.table — view.table","text":"","code":"view.table(molecules, dat, depictor = NULL)"},{"path":"https://cdk-r.github.io/cdkr/reference/view.table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"view.table — view.table","text":"molecules list molecule objects (`jobjRef` representing `IAtomContainer`) dat data.frame associated molecules, one per row depictor Default NULL","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/write.molecules.html","id":null,"dir":"Reference","previous_headings":"","what":"Write molecules to disk. — write.molecules","title":"Write molecules to disk. — write.molecules","text":"function writes one molecules SD file disk, can single- multi-molecule variety. addition, molecule keyed properties, can also written SD tags.","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/write.molecules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write molecules to disk. — write.molecules","text":"","code":"write.molecules(mols, filename, together = TRUE, write.props = FALSE)"},{"path":"https://cdk-r.github.io/cdkr/reference/write.molecules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write molecules to disk. — write.molecules","text":"mols `list` `jobjRef` objects representing  `IAtomContainer` objects filename name SD file write. Note `together` `FALSE` argument taken prefix name individual files together `TRUE` molecules written single SD file. `FALSE` molecule written individual file write.props `TRUE`, keyed properties included SD file output","code":""},{"path":"https://cdk-r.github.io/cdkr/reference/write.molecules.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write molecules to disk. — write.molecules","text":"case individual SD files desired together argument can set ot FALSE. case, value filename used prefix, numeric identifier suffix \".sdf\" appended.","code":""},{"path":[]},{"path":"https://cdk-r.github.io/cdkr/reference/write.molecules.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Write molecules to disk. — write.molecules","text":"Rajarshi Guha (rajarshi.guha@gmail.com)","code":""},{"path":"https://cdk-r.github.io/cdkr/news/index.html","id":"rcdk-380","dir":"Changelog","previous_headings":"","what":"rcdk 3.8.0","title":"rcdk 3.8.0","text":"CRAN release: 2023-06-12 Change DESCRIPTION accordance CRAN rules JDKs Fix System Requirements line","code":""},{"path":"https://cdk-r.github.io/cdkr/news/index.html","id":"rcdk-370","dir":"Changelog","previous_headings":"","what":"rcdk 3.7.0","title":"rcdk 3.7.0","text":"CRAN release: 2022-09-26 Update rCDK work rcdklibs 2.8","code":""},{"path":"https://cdk-r.github.io/cdkr/news/index.html","id":"rcdk-360","dir":"Changelog","previous_headings":"","what":"rcdk 3.6.0","title":"rcdk 3.6.0","text":"CRAN release: 2021-10-17 Fix code handle changes JDK17. Notably, needed reduce use J notation nubmer places favor direct calls. formally deprecated .typing favor set.atom.types Updated handling atomic descriptors resolve name mismatch bug Added test case atomic descriptors (thanks Francesca Di Cesare) Updated @export annotation function name avoid interpretation S3 method Refactored .typing set.atom.types updated use J notation Refactored methods use renamed function","code":""},{"path":"https://cdk-r.github.io/cdkr/news/index.html","id":"rcdk-351","dir":"Changelog","previous_headings":"","what":"rcdk 3.5.1","title":"rcdk 3.5.1","text":"minor update make bond order enums available setting order pre-exisitng bonds","code":""},{"path":"https://cdk-r.github.io/cdkr/news/index.html","id":"rcdk-350","dir":"Changelog","previous_headings":"","what":"rcdk 3.5.0","title":"rcdk 3.5.0","text":"CRAN release: 2020-03-11 update RCDKlibs 2.3. changes uderlying AtomContainer defualt Atomcontainer2 also new support mass spec mass functions. rcdk side moved tidyverse documentation build system.","code":""},{"path":"https://cdk-r.github.io/cdkr/news/index.html","id":"rcdk-347","dir":"Changelog","previous_headings":"","what":"rcdk 3.4.7","title":"rcdk 3.4.7","text":"CRAN release: 2018-04-30 minor update comply CRAN policy. Minimum Java 8 required; fix issue unittests writing system files.","code":""}]
